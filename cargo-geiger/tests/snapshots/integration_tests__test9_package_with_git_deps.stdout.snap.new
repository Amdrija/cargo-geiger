---
source: cargo-geiger/tests/integration_tests.rs
assertion_line: 50
expression: stdout
---
PackageId: PackageId { repr: "itertools 0.8.0 (git+https://github.com/rust-itertools/itertools.git?rev=8761fbefb3b209#8761fbefb3b209cf41829f8dba38044b69c1d8dd)" } {}
PackageId: PackageId { repr: "ref_slice 1.2.1 (git+https://github.com/steveklabnik/ref_slice.git#4dee011b55f36ac44bbdbb72323cd8f09cfd22df)" } {}
PackageId: PackageId { repr: "either 1.9.0 (registry+https://github.com/rust-lang/crates.io-index)" } {}
PackageId: PackageId { repr: "test9_package_with_git_deps 0.1.0 (path+file:///tmp/.tmpXG9Fjs/test9_package_with_git_deps)" } {}
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Either, span: bytes(14625..14631) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Left, span: bytes(14633..14637) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(14638..14642) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Either, span: bytes(14684..14690) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Right, span: bytes(14692..14697) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(14698..14703) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Either, span: bytes(14936..14942) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: deserialize, span: bytes(14944..14955) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: deserializer, span: bytes(14956..14968) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(15006..15008) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: super, span: bytes(15009..15014) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Either, span: bytes(15016..15022) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Left, span: bytes(15024..15028) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(15029..15033) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(15073..15075) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: super, span: bytes(15076..15081) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Either, span: bytes(15083..15089) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Right, span: bytes(15091..15096) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(15097..15102) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(15128..15131) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: error, span: bytes(15132..15137) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(36901..36905) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Either, span: bytes(36906..36912) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Left, span: bytes(36914..36918) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(36919..36923) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(36972..36976) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Either, span: bytes(36977..36983) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Right, span: bytes(36985..36990) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(36991..36996) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Option, span: bytes(37260..37266) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: deserialize, span: bytes(37268..37279) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: deserializer, span: bytes(37280..37292) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(37336..37338) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(37339..37343) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: super, span: bytes(37344..37349) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Either, span: bytes(37351..37357) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Left, span: bytes(37359..37363) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(37364..37368) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(12141..12145) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Position, span: bytes(12146..12154) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: First, span: bytes(12156..12161) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(12162..12166) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(12202..12206) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Position, span: bytes(12207..12215) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Only, span: bytes(12217..12221) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(12222..12226) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(12499..12503) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Position, span: bytes(12504..12512) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Middle, span: bytes(12514..12520) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(12521..12525) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(12561..12565) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Position, span: bytes(12566..12574) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Last, span: bytes(12576..12580) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(12581..12585) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(37415..37417) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(37418..37422) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: super, span: bytes(37423..37428) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Either, span: bytes(37430..37436) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Right, span: bytes(37438..37443) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(37444..37449) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(37474..37476) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(37477..37481) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(37506..37509) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: error, span: bytes(37510..37515) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Rc, span: bytes(9119..9121) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(9123..9126) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RefCell, span: bytes(9127..9134) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(9136..9139) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iterable, span: bytes(9140..9148) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(9149..9158) }, turbofish: None, paren_token: Paren, args: [] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(14926..14930) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(14931..14935) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: element, span: bytes(14936..14943) }) }), dot_token: Dot, method: Ident { sym: clone, span: bytes(14944..14949) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(15210..15219) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(15221..15231) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(15232..15241) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add, span: bytes(15243..15246) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sh, span: bytes(15247..15249) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sh, span: bytes(15251..15253) }, arguments: None }] } })] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: has_peek, span: bytes(15256..15264) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(15491..15492) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accum, span: bytes(15493..15498) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(15500..15501) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(15636..15637) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accum, span: bytes(15638..15643) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: element, span: bytes(15645..15652) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(15653..15658) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(15691..15692) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accum, span: bytes(15693..15698) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(15700..15701) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(22702..22706) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(22708..22712) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(22713..22714) }) }) }), paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(10555..10558) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: mem, span: bytes(10560..10563) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: size_of, span: bytes(10565..10572) }, arguments: AngleBracketed(AngleBracketedGenericArguments { colon2_token: Some(Colon2), lt_token: Lt, args: [Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(10575..10580) }, arguments: None }] } }))], gt_token: Gt }) }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(10820..10824) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: element, span: bytes(10825..10832) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(11215..11219) }, arguments: None }] } }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(11220..11224) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: n, span: bytes(11225..11226) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(14036..14040) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(14042..14043) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(14045..14046) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(14264..14273) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(14275..14278) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(14279..14283) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: a, span: bytes(14284..14285) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(14286..14295) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(14299..14303) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: b, span: bytes(14304..14305) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(14306..14315) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(42080..42084) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Diff, span: bytes(42085..42089) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Shorter, span: bytes(42091..42098) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: idx, span: bytes(42099..42102) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: put_back, span: bytes(42104..42112) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(42113..42114) }, arguments: None }] } })] }), dot_token: Dot, method: Ident { sym: with_value, span: bytes(42116..42126) }, turbofish: None, paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i_elem, span: bytes(42127..42133) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: is_equal, span: bytes(42170..42178) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i_elem, span: bytes(42180..42186) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j_elem, span: bytes(42189..42195) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: put_back, span: bytes(42233..42241) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(42242..42243) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: put_back, span: bytes(42299..42307) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(42308..42309) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(42354..42358) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Diff, span: bytes(42359..42363) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: FirstMismatch, span: bytes(42365..42378) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: idx, span: bytes(42379..42382) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: remaining_i, span: bytes(42384..42395) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: remaining_j, span: bytes(42397..42408) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Diff, span: bytes(42487..42491) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Longer, span: bytes(42493..42499) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: idx, span: bytes(42500..42503) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: put_back, span: bytes(42505..42513) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(42514..42515) }, arguments: None }] } })] }), dot_token: Dot, method: Ident { sym: with_value, span: bytes(42517..42527) }, turbofish: None, paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j_elem, span: bytes(42528..42534) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(22787..22792) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max_value, span: bytes(22794..22803) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RefCell, span: bytes(29149..29156) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(29158..29161) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(29162..29166) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(29168..29172) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(29174..29175) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RefCell, span: bytes(29345..29352) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(29354..29357) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(29358..29362) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(29363..29367) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(30143..30145) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(30802..30804) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(12247..12251) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(12253..12257) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: filler, span: bytes(12258..12264) }) }) }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(12266..12270) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: pos, span: bytes(12271..12274) }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(10645..10648) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(10650..10663) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cap, span: bytes(10664..10667) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(10775..10776) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: stack, span: bytes(10777..10782) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: pop, span: bytes(10783..10786) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: unwrap, span: bytes(10789..10795) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(10799..10800) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(12631..12640) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max, span: bytes(12642..12645) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(12646..12650) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(12651..12655) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(12656..12665) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: tail, span: bytes(12670..12674) }, arguments: None }] } }), Comma, Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(12676..12680) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: tail, span: bytes(12681..12685) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(13116..13120) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(13122..13126) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: filler, span: bytes(13127..13133) }) }) }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(13135..13139) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: min, span: bytes(13140..13143) }) })] })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(24790..24794) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(24795..24796) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(24803..24807) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: state, span: bytes(24808..24813) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: put_back, span: bytes(17359..17367) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(17368..17372) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(17373..17382) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: fuse, span: bytes(17385..17389) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: put_back, span: bytes(17409..17417) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(17418..17423) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(17424..17433) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: fuse, span: bytes(17436..17440) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(25612..25616) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(25617..25618) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(25621..25625) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: state, span: bytes(25626..25631) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(25642..25646) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: mem, span: bytes(25647..25650) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: replace, span: bytes(25652..25659) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(25665..25669) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: state, span: bytes(25670..25675) }) }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: next_state, span: bytes(25677..25687) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(25772..25777) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max_value, span: bytes(25779..25788) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(18494..18498) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(18499..18511) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Left, span: bytes(18513..18517) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(18518..18522) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(18577..18581) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(18582..18594) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Right, span: bytes(18596..18601) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(18602..18607) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(18677..18681) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: cmp_fn, span: bytes(18682..18688) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(18691..18695) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(18698..18703) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(18770..18774) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(18775..18787) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Both, span: bytes(18789..18793) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(18794..18798) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(18800..18805) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(18925..18929) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(18930..18942) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Left, span: bytes(18944..18948) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(18949..18953) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(19096..19100) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(19101..19113) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Right, span: bytes(19115..19120) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(19121..19126) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: Some(Colon2), segments: [PathSegment { ident: Ident { sym: std, span: bytes(19388..19391) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: cmp, span: bytes(19393..19396) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max, span: bytes(19398..19401) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a_lower, span: bytes(19402..19409) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b_lower, span: bytes(19411..19418) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(19503..19507) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(19508..19509) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(19512..19513) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: VecDeque, span: bytes(26968..26976) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(26978..26981) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Rc, span: bytes(27039..27041) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(27043..27046) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RefCell, span: bytes(27047..27054) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(27056..27059) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: buffer, span: bytes(27060..27066) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(27884..27888) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(27889..27892) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(28162..28171) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(28173..28183) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sh, span: bytes(28184..28186) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: log_len, span: bytes(28188..28195) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(16006..16010) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(16011..16015) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(16254..16258) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(16259..16264) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(16480..16484) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(16485..16489) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(16524..16529) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(16530..16535) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Both, span: bytes(16579..16583) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(16584..16588) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(16590..16595) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(16817..16821) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(16822..16826) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(16865..16870) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(16871..16876) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Both, span: bytes(16928..16932) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(16933..16937) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(16939..16944) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(14310..14316) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(14317..14318) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(14637..14643) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(14645..14646) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(14739..14743) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(14744..14745) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(20964..20968) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(20970..20971) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(20972..20977) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(20981..20982) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(21028..21032) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(21034..21035) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(21037..21038) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(15062..15068) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(15070..15071) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(15164..15168) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(15169..15170) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MinMaxResult, span: bytes(21563..21575) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: OneElement, span: bytes(21577..21587) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(21588..21589) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key_for, span: bytes(21650..21657) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(21659..21660) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key_for, span: bytes(21692..21699) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(21701..21702) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(21729..21731) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(21733..21734) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(21737..21738) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: yk, span: bytes(21741..21743) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xk, span: bytes(21746..21748) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key_for, span: bytes(22366..22373) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(22375..22380) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(22402..22404) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(22406..22411) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min, span: bytes(22414..22417) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first_key, span: bytes(22420..22429) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_key, span: bytes(22432..22439) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(22503..22505) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(22507..22512) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max, span: bytes(22515..22518) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first_key, span: bytes(22521..22530) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max_key, span: bytes(22533..22540) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key_for, span: bytes(22692..22699) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(22701..22706) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key_for, span: bytes(22734..22741) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second, span: bytes(22743..22749) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(22764..22766) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second, span: bytes(22768..22774) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(22777..22782) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second_key, span: bytes(22785..22795) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first_key, span: bytes(22798..22807) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(22826..22828) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(22830..22835) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min, span: bytes(22838..22841) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first_key, span: bytes(22844..22853) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_key, span: bytes(22856..22863) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(22963..22965) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second, span: bytes(22967..22973) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max, span: bytes(22976..22979) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second_key, span: bytes(22982..22992) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max_key, span: bytes(22995..23002) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(23120..23122) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second, span: bytes(23124..23130) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min, span: bytes(23133..23136) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second_key, span: bytes(23139..23149) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_key, span: bytes(23152..23159) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(23261..23263) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(23265..23270) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max, span: bytes(23273..23276) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first_key, span: bytes(23279..23288) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max_key, span: bytes(23291..23298) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MinMaxResult, span: bytes(23403..23415) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: MinMax, span: bytes(23417..23423) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min, span: bytes(23424..23427) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max, span: bytes(23429..23432) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(17033..17037) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: replace, span: bytes(17038..17045) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(17051..17055) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(17056..17060) }) }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: next, span: bytes(17062..17066) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(17254..17263) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(17265..17275) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(17276..17280) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: tail, span: bytes(17281..17285) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(17286..17295) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(15574..15578) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(15579..15591) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Left, span: bytes(15593..15597) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(15598..15599) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(15634..15638) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(15639..15651) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Right, span: bytes(15653..15658) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(15659..15660) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(15698..15702) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(15703..15715) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Both, span: bytes(15717..15721) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(15722..15723) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(15725..15726) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sift_down, span: bytes(17678..17687) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(17688..17692) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(17694..17695) }, arguments: None }] } }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: less_than, span: bytes(17702..17711) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(15821..15830) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max, span: bytes(15832..15835) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(15836..15840) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: a, span: bytes(15841..15842) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(15843..15852) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(15856..15860) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: b, span: bytes(15861..15862) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(15863..15872) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(16306..16310) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(16311..16323) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Both, span: bytes(16325..16329) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(16330..16331) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(16333..16334) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(16458..16462) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(16463..16475) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Left, span: bytes(16477..16481) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(16482..16483) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(16522..16526) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(16527..16539) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Right, span: bytes(16541..16546) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(16547..16548) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(13081..13085) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(13544..13547) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max, span: bytes(13549..13552) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a_lower, span: bytes(13553..13560) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b_lower, span: bytes(13562..13569) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(13646..13650) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(13651..13654) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max, span: bytes(13656..13659) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(13660..13661) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(13663..13664) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: less_than, span: bytes(18218..18227) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heap, span: bytes(18229..18233) }, arguments: None }] } }), bracket_token: Bracket, index: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(18234..18239) }, arguments: None }] } }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heap, span: bytes(18243..18247) }, arguments: None }] } }), bracket_token: Bracket, index: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: child, span: bytes(18248..18253) }, arguments: None }] } }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: less_than, span: bytes(18364..18373) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heap, span: bytes(18375..18379) }, arguments: None }] } }), bracket_token: Bracket, index: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: child, span: bytes(18380..18385) }, arguments: None }] } }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heap, span: bytes(18389..18393) }, arguments: None }] } }), bracket_token: Bracket, index: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: pos, span: bytes(18394..18397) }, arguments: None }] } }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(13881..13884) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(13886..13889) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a_lower, span: bytes(13890..13897) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b_lower, span: bytes(13899..13906) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(13984..13988) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(13989..13992) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(13994..13997) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: u1, span: bytes(13998..14000) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: u2, span: bytes(14002..14004) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(19728..19731) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(19733..19746) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lower, span: bytes(19747..19752) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HeadTail, span: bytes(19792..19800) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(19802..19805) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: it, span: bytes(19806..19808) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(19809..19818) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heapify, span: bytes(19829..19836) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heap, span: bytes(19842..19846) }, arguments: None }] } }) }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: a, span: bytes(19849..19850) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: b, span: bytes(19852..19853) }, subpat: None })], or2_token: Or, output: Default, body: Binary(ExprBinary { attrs: [], left: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(19855..19856) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(19857..19861) }) }), op: Lt(Lt), right: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(19864..19865) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(19866..19870) }) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sift_down, span: bytes(20460..20469) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(20475..20479) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: heap, span: bytes(20480..20484) }) }) }), Comma, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: a, span: bytes(20490..20491) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: b, span: bytes(20493..20494) }, subpat: None })], or2_token: Or, output: Default, body: Binary(ExprBinary { attrs: [], left: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(20496..20497) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(20498..20502) }) }), op: Lt(Lt), right: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(20505..20506) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(20507..20511) }) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(20522..20526) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: result, span: bytes(20527..20533) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(20732..20736) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(21894..21897) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(21899..21912) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lower, span: bytes(21913..21918) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HeadTail, span: bytes(21958..21966) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(21968..21971) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: it, span: bytes(21972..21974) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(21975..21984) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heapify, span: bytes(21995..22002) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heap, span: bytes(22008..22012) }, arguments: None }] } }) }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: a, span: bytes(22015..22016) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: b, span: bytes(22018..22019) }, subpat: None })], or2_token: Or, output: Default, body: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: less_than, span: bytes(22021..22030) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(22032..22033) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(22034..22038) }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(22041..22042) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(22043..22047) }) }) })] }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sift_down, span: bytes(22561..22570) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(22576..22580) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: heap, span: bytes(22581..22585) }) }) }), Comma, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: a, span: bytes(22591..22592) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: b, span: bytes(22594..22595) }, subpat: None })], or2_token: Or, output: Default, body: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: less_than, span: bytes(22597..22606) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(22608..22609) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(22610..22614) }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(22617..22618) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(22619..22623) }) }) })] }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(22635..22639) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: result, span: bytes(22640..22646) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(22845..22849) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(79755..79759) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: len, span: bytes(79760..79763) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Default, span: bytes(80412..80419) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: default, span: bytes(80421..80428) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(80611..80612) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: collect_from_iter, span: bytes(80614..80631) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(80637..80641) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(80642..80646) }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(80653..80657) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: buf, span: bytes(80658..80661) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: TupleBuffer, span: bytes(81182..81193) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(81195..81198) }, arguments: None }] } }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(81199..81203) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: buf, span: bytes(81204..81207) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(81888..81889) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: num_items, span: bytes(81891..81900) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: once, span: bytes(82078..82082) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(82083..82087) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(82088..82093) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: once, span: bytes(82103..82107) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(82108..82112) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(82152..82153) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: collect_from_iter_no_buf, span: bytes(82155..82179) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(82180..82184) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(82485..82486) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: num_items, span: bytes(82488..82497) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(82526..82527) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: collect_from_iter_no_buf, span: bytes(82529..82553) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(82559..82563) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(82564..82568) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(82744..82748) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: last, span: bytes(82749..82753) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(82754..82759) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MultiProduct, span: bytes(42799..42811) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iters, span: bytes(42812..42817) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: map, span: bytes(42818..42821) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: i, span: bytes(42823..42824) }, subpat: None })], or2_token: Or, output: Default, body: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MultiProductIter, span: bytes(42826..42842) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(42844..42847) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(42848..42849) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(42850..42859) }, turbofish: None, paren_token: Paren, args: [] })] }) })] }), dot_token: Dot, method: Ident { sym: collect, span: bytes(42864..42871) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MultiProduct, span: bytes(44278..44290) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: iterate_last, span: bytes(44292..44304) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: rest, span: bytes(44305..44309) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: state, span: bytes(44311..44316) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MultiProduct, span: bytes(46234..46246) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: iterate_last, span: bytes(46248..46260) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(46279..46283) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(46284..46285) }) }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MultiProductIterState, span: bytes(46299..46320) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: StartOfIter, span: bytes(46322..46333) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(46358..46362) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(46363..46367) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: curr_iterator, span: bytes(46368..46381) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(47169..47173) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(47265..47269) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(47311..47320) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: mul, span: bytes(47322..47325) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(47326..47329) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: multi_iter, span: bytes(47331..47341) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(47342..47346) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(47347..47356) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(47431..47435) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(47637..47646) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add, span: bytes(47648..47651) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(47652..47661) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: mul, span: bytes(47663..47666) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(47667..47670) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: total_size, span: bytes(47672..47682) }, arguments: None }] } })] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cur_size, span: bytes(47685..47693) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(48015..48019) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lasts, span: bytes(48020..48025) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(15178..15182) }, arguments: None }] } }) }) }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: arg, span: bytes(15184..15187) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(19963..19966) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(19968..19971) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(20472..20476) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(20477..20480) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(20515..20519) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(20520..20523) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(20617..20621) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(20622..20625) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(21409..21412) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(21414..21417) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(22168..22172) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(22173..22176) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(22222..22226) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(22227..22230) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(22391..22395) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(22396..22399) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(22418..22422) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(22423..22426) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(23305..23309) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(23310..23313) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(23347..23351) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(23352..23355) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RefCell, span: bytes(24840..24847) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(24849..24852) }, arguments: None }] } }), paren_token: Paren, args: [Struct(ExprStruct { attrs: [], path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: GroupInner, span: bytes(24853..24863) }, arguments: None }] }, brace_token: Brace, fields: [FieldValue { attrs: [], member: Named(Ident { sym: key, span: bytes(24878..24881) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(24883..24884) }, arguments: None }] } }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: iter, span: bytes(24898..24902) }), colon_token: Some(Colon), expr: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(24904..24908) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(24909..24918) }, turbofish: None, paren_token: Paren, args: [] }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: current_key, span: bytes(24934..24945) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(24947..24951) }, arguments: None }] } }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: current_elt, span: bytes(24965..24976) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(24978..24982) }, arguments: None }] } }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: done, span: bytes(24996..25000) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Bool(LitBool { value: false }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: top_group, span: bytes(25021..25030) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: oldest_buffered_group, span: bytes(25047..25068) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: bottom_group, span: bytes(25085..25097) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: buffer, span: bytes(25114..25120) }), colon_token: Some(Colon), expr: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(25122..25125) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(25127..25130) }, arguments: None }] } }), paren_token: Paren, args: [] }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: dropped_group, span: bytes(25146..25159) }), colon_token: Some(Colon), expr: Unary(ExprUnary { attrs: [], op: Not(Bang), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }) }, Comma], dot2_token: None, rest: None })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Cell, span: bytes(25192..25196) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(25198..25201) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(27017..27021) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(27022..27025) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RefCell, span: bytes(28051..28058) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(28060..28063) }, arguments: None }] } }), paren_token: Paren, args: [Struct(ExprStruct { attrs: [], path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: GroupInner, span: bytes(28064..28074) }, arguments: None }] }, brace_token: Brace, fields: [FieldValue { attrs: [], member: Named(Ident { sym: key, span: bytes(28089..28092) }), colon_token: Some(Colon), expr: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ChunkIndex, span: bytes(28094..28104) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(28106..28109) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size, span: bytes(28110..28114) }, arguments: None }] } })] }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: iter, span: bytes(28129..28133) }), colon_token: Some(Colon), expr: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(28135..28139) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(28140..28149) }, turbofish: None, paren_token: Paren, args: [] }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: current_key, span: bytes(28165..28176) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(28178..28182) }, arguments: None }] } }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: current_elt, span: bytes(28196..28207) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(28209..28213) }, arguments: None }] } }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: done, span: bytes(28227..28231) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Bool(LitBool { value: false }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: top_group, span: bytes(28252..28261) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: oldest_buffered_group, span: bytes(28278..28299) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: bottom_group, span: bytes(28316..28328) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: buffer, span: bytes(28345..28351) }), colon_token: Some(Colon), expr: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(28353..28356) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(28358..28361) }, arguments: None }] } }), paren_token: Paren, args: [] }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: dropped_group, span: bytes(28377..28390) }), colon_token: Some(Colon), expr: Unary(ExprUnary { attrs: [], op: Not(Bang), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }) }, Comma], dot2_token: None, rest: None })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Cell, span: bytes(28423..28427) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(28429..28432) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(30815..30819) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(30820..30823) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(15410..15413) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(15415..15418) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(15419..15420) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(15421..15424) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(15428..15429) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(15430..15433) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(15946..15949) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(15951..15954) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(15955..15956) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(15957..15960) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(15964..15965) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(15966..15969) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(16465..16469) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(16492..16496) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: t, span: bytes(16497..16498) }) }), dot_token: Dot, method: Ident { sym: get_unchecked, span: bytes(16499..16512) }, turbofish: None, paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(16513..16514) }, arguments: None }] } })] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(16537..16541) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: u, span: bytes(16542..16543) }) }), dot_token: Dot, method: Ident { sym: get_unchecked, span: bytes(16544..16557) }, turbofish: None, paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(16558..16559) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(16715..16719) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: len, span: bytes(16720..16723) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(17081..17085) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(17108..17112) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: t, span: bytes(17113..17114) }) }), dot_token: Dot, method: Ident { sym: get_unchecked, span: bytes(17115..17128) }, turbofish: None, paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(17129..17130) }, arguments: None }] } })] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(17153..17157) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: u, span: bytes(17158..17159) }) }), dot_token: Dot, method: Ident { sym: get_unchecked, span: bytes(17160..17173) }, turbofish: None, paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(17174..17175) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(43307..43310) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(43312..43325) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: n, span: bytes(43326..43327) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: LazyBuffer, span: bytes(43415..43425) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(43427..43430) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(43431..43435) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(45077..45080) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(45082..45095) }, arguments: None }] } }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(45096..45100) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: n, span: bytes(45101..45102) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(45210..45214) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: result, span: bytes(45215..45221) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(45475..45478) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(45480..45483) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: Some(QSelf { lt_token: Lt, ty: Infer(TypeInfer { underscore_token: Underscore }), position: 0, as_token: None, gt_token: Gt }), path: Path { leading_colon: Some(Colon2), segments: [PathSegment { ident: Ident { sym: default, span: bytes(29098..29105) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(18387..18396) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(18398..18408) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(18409..18413) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: inner, span: bytes(18414..18419) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(18420..18429) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: additional_len, span: bytes(18433..18447) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(18309..18313) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(18314..18315) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(18378..18381) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: e, span: bytes(18382..18383) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Zip, span: bytes(18290..18293) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from, span: bytes(18295..18299) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: t, span: bytes(18300..18301) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(20147..20149) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: processor, span: bytes(20173..20182) }, arguments: None }] } }), paren_token: Paren, args: [Struct(ExprStruct { attrs: [], path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ProcessResults, span: bytes(20183..20197) }, arguments: None }] }, brace_token: Brace, fields: [FieldValue { attrs: [], member: Named(Ident { sym: error, span: bytes(20200..20205) }), colon_token: Some(Colon), expr: Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: error, span: bytes(20212..20217) }, arguments: None }] } }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: iter, span: bytes(20219..20223) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(20225..20229) }, arguments: None }] } }) }], dot2_token: None, rest: None })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: VecDeque, span: bytes(24015..24023) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(24025..24028) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(24525..24529) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(24531..24535) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: buf, span: bytes(24536..24539) }) }), bracket_token: Bracket, index: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(24540..24544) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: index, span: bytes(24545..24550) }) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(24699..24703) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(24705..24709) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: buf, span: bytes(24710..24713) }) }), bracket_token: Bracket, index: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(24714..24718) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: index, span: bytes(24719..24724) }) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(25130..25136) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(25137..25138) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(25254..25260) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(25261..25262) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(25674..25683) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(25685..25695) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(25696..25700) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(25701..25705) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(25706..25715) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(25719..25723) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: buf, span: bytes(25724..25727) }) }), dot_token: Dot, method: Ident { sym: len, span: bytes(25728..25731) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HashMap, span: bytes(46926..46933) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(46935..46938) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(47008..47011) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(47013..47016) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(20767..20770) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(20772..20775) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(21646..21655) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(21657..21667) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(21668..21672) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(21673..21677) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(21678..21687) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(21691..21695) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: top, span: bytes(21696..21699) }) }), dot_token: Dot, method: Ident { sym: len, span: bytes(21700..21703) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Unspecialized, span: bytes(48257..48270) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: arr, span: bytes(48271..48274) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(48275..48284) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: intersperse, span: bytes(48287..48298) }, turbofish: None, paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HashMap, span: bytes(86486..86493) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(86495..86498) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(87159..87163) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(87164..87165) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(87168..87169) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(87248..87252) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(87253..87254) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: count_new_keys, span: bytes(87548..87562) }, arguments: None }] } }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(87563..87567) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: used, span: bytes(87568..87572) }) }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(87574..87578) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(87579..87583) }) }), dot_token: Dot, method: Ident { sym: map, span: bytes(87584..87587) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: Some(Move), or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: elt, span: bytes(87594..87597) }, subpat: None })], or2_token: Or, output: Default, body: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key_f, span: bytes(87599..87604) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(87606..87609) }, arguments: None }] } }) })] }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(88009..88013) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(88014..88017) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: count_new_keys, span: bytes(88289..88303) }, arguments: None }] } }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(88304..88308) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(88309..88313) }) }), dot_token: Dot, member: Named(Ident { sym: used, span: bytes(88314..88318) }) }), Comma, Field(ExprField { attrs: [], base: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(88320..88324) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(88325..88329) }) }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(88330..88334) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HashMap, span: bytes(88981..88988) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(88990..88993) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(31942..31951) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(31952..31953) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ParseError, span: bytes(14741..14751) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Numeric, span: bytes(14753..14760) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: err, span: bytes(14761..14764) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: core, span: bytes(89434..89438) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: slice, span: bytes(89440..89445) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_raw_parts, span: bytes(89447..89461) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(89462..89463) }, arguments: None }] } }), Comma, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(15331..15334) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ParseError, span: bytes(15335..15345) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Other, span: bytes(15347..15352) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Str(LitStr { token: "Missing name" }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(15388..15390) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iris, span: bytes(15391..15395) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(15590..15593) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(15595..15598) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(32110..32119) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(32120..32121) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(32124..32125) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s1, span: bytes(23207..23209) }, arguments: None }] } }), paren_token: Paren, args: [Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23210..23211) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(32339..32348) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(32349..32350) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(32353..32354) }, arguments: None }] } }) }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: k, span: bytes(32357..32358) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: core, span: bytes(89757..89761) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: slice, span: bytes(89763..89768) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_raw_parts_mut, span: bytes(89770..89788) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(89789..89790) }, arguments: None }] } }), Comma, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ref_slice, span: bytes(90017..90026) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: val, span: bytes(90027..90030) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: mut_ref_slice, span: bytes(90296..90309) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: val, span: bytes(90310..90313) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(15831..15834) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: process, span: bytes(15836..15843) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: exit, span: bytes(15845..15849) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s2, span: bytes(23253..23255) }, arguments: None }] } }), paren_token: Paren, args: [Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23256..23257) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }), Comma, Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23262..23263) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(32637..32646) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Binary(ExprBinary { attrs: [], left: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(32647..32648) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(32651..32652) }, arguments: None }] } }) }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: k, span: bytes(32655..32656) }, arguments: None }] } }) }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(32659..32660) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ord, span: bytes(15956..15959) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: cmp, span: bytes(15961..15964) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(15966..15967) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: name, span: bytes(15968..15972) }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(15975..15976) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: name, span: bytes(15977..15981) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HashMap, span: bytes(16091..16098) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(16100..16103) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s3, span: bytes(23305..23307) }, arguments: None }] } }), paren_token: Paren, args: [Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23308..23309) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }), Comma, Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23314..23315) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) }) }), Comma, Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23320..23321) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 2 }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(32856..32865) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(32866..32867) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: repeat, span: bytes(17073..17079) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Char(LitChar { token: ' ' }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s4, span: bytes(23363..23365) }, arguments: None }] } }), paren_token: Paren, args: [Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23366..23367) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }), Comma, Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23372..23373) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) }) }), Comma, Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23378..23379) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 2 }) }) }), Comma, Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23384..23385) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 3 }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_max, span: bytes(17397..17404) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: irises, span: bytes(17406..17412) }, arguments: None }] } }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(17414..17415) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_max, span: bytes(17447..17454) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: irises, span: bytes(17456..17462) }, arguments: None }] } }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(17464..17465) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(33011..33020) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(33021..33022) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(33025..33026) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s1, span: bytes(23430..23432) }, arguments: None }] } }), paren_token: Paren, args: [Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23434..23435) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(23436..23437) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: round_to_grid, span: bytes(17712..17725) }, arguments: None }] } }), paren_token: Paren, args: [Index(ExprIndex { attrs: [], expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iris, span: bytes(17726..17730) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: data, span: bytes(17731..17735) }) }), bracket_token: Bracket, index: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(17736..17737) }, arguments: None }] } }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_x, span: bytes(17740..17745) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max_x, span: bytes(17747..17752) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: flip, span: bytes(17776..17780) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: round_to_grid, span: bytes(17781..17794) }, arguments: None }] } }), paren_token: Paren, args: [Index(ExprIndex { attrs: [], expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iris, span: bytes(17795..17799) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: data, span: bytes(17800..17804) }) }), bracket_token: Bracket, index: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(17805..17806) }, arguments: None }] } }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_y, span: bytes(17809..17814) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max_y, span: bytes(17816..17821) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s2, span: bytes(23483..23485) }, arguments: None }] } }), paren_token: Paren, args: [Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23487..23488) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(23489..23490) }) }) }), Comma, Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23493..23494) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 1, span: bytes(23495..23496) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s3, span: bytes(23548..23550) }, arguments: None }] } }), paren_token: Paren, args: [Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23552..23553) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(23554..23555) }) }) }), Comma, Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23558..23559) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 1, span: bytes(23560..23561) }) }) }), Comma, Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23564..23565) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 2, span: bytes(23566..23567) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s4, span: bytes(23625..23627) }, arguments: None }] } }), paren_token: Paren, args: [Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23629..23630) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(23631..23632) }) }) }), Comma, Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23635..23636) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 1, span: bytes(23637..23638) }) }) }), Comma, Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23641..23642) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 2, span: bytes(23643..23644) }) }) }), Comma, Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(23647..23648) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 3, span: bytes(23649..23650) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(33173..33182) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(33183..33184) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(33187..33188) }, arguments: None }] } }) }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: k, span: bytes(33191..33192) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(33342..33351) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Binary(ExprBinary { attrs: [], left: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(33352..33353) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(33356..33357) }, arguments: None }] } }) }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: k, span: bytes(33360..33361) }, arguments: None }] } }) }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(33364..33365) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: repeat, span: bytes(13023..13029) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1i32 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(13101..13105) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(13107..13116) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(13117..13120) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: repeat, span: bytes(13206..13212) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1i32 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(13290..13294) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(13296..13305) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(13306..13309) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(13443..13452) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(13453..13455) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(13471..13480) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(13481..13483) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(13560..13564) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(13566..13575) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(13576..13577) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(13592..13596) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(13598..13607) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(13608..13609) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(13760..13769) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(13770..13772) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(13788..13797) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(13798..13800) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(14076..14085) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(14086..14088) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(14104..14113) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(14114..14116) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(14408..14417) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(14418..14420) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(14436..14445) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(14446..14448) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(14464..14473) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: zs, span: bytes(14474..14476) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(14568..14572) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(14574..14583) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(14584..14585) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(14600..14604) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(14606..14615) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(14616..14617) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(14632..14636) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(14638..14647) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: z, span: bytes(14648..14649) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(14818..14827) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(14829..14831) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(14851..14860) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(14862..14864) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: itertools, span: bytes(14891..14900) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: multizip, span: bytes(14902..14910) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(14912..14914) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(14916..14918) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(14935..14939) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(14941..14950) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(14951..14952) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(14967..14971) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(14973..14982) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(14983..14984) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(15122..15131) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(15132..15134) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(15150..15159) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(15160..15162) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ZipSlices, span: bytes(15206..15215) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(15217..15220) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(15222..15224) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(15227..15229) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(15245..15249) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(15251..15260) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(15261..15262) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(15277..15281) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(15283..15292) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(15293..15294) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(15436..15445) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(15446..15448) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(15468..15477) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(15478..15480) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ZipSlices, span: bytes(15528..15537) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_slices, span: bytes(15539..15550) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(15552..15554) }, arguments: None }] } }), bracket_token: Bracket, index: Range(ExprRange { attrs: [], from: None, limits: HalfOpen(Dot2), to: None }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(15565..15567) }, arguments: None }] } }), bracket_token: Bracket, index: Range(ExprRange { attrs: [], from: None, limits: HalfOpen(Dot2), to: None }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(15587..15591) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(15593..15602) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(15603..15604) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(15619..15623) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(15625..15634) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(15635..15636) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(15785..15794) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(15795..15797) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(15813..15822) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(15823..15825) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ZipSlices, span: bytes(15895..15904) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(15906..15909) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(15911..15913) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(15916..15918) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(16108..16117) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(16118..16120) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(16136..16145) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(16146..16148) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ZipSlices, span: bytes(16216..16225) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(16227..16230) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(16232..16234) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(16237..16239) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(16428..16437) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(16438..16440) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(16456..16465) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(16466..16468) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(16585..16588) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(16590..16593) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(16594..16596) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(16597..16600) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(16604..16606) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(16607..16610) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(16766..16770) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(16772..16781) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(16782..16783) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(16798..16802) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(16804..16813) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(16814..16815) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(16975..16984) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(16985..16987) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(17003..17012) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(17013..17015) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(17132..17135) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(17137..17140) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(17141..17143) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(17144..17147) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(17151..17153) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(17154..17157) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(17479..17488) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(17489..17491) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(17507..17516) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(17517..17519) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(17636..17639) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(17641..17644) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(17645..17647) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(17648..17651) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(17655..17657) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(17658..17661) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(17990..17999) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(18000..18002) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(18018..18027) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(18028..18030) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(18147..18150) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(18152..18155) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(18156..18158) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(18159..18162) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(18166..18168) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(18169..18172) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(19214..19223) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(19224..19226) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(19242..19251) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(19252..19254) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(19292..19295) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(19297..19300) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(19301..19303) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(19304..19307) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(19311..19313) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(19314..19317) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(19465..19469) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(19471..19480) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(19481..19482) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(19497..19501) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(19503..19512) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(19513..19514) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(19690..19699) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(19700..19702) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(19718..19727) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(19728..19730) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(19768..19771) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(19773..19776) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(19777..19779) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(19780..19783) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(19787..19789) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(19790..19793) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(20164..20173) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(20174..20176) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(20192..20201) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(20202..20204) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(20242..20245) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(20247..20250) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(20251..20253) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(20254..20257) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(20261..20263) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(20264..20267) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(20657..20666) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(20667..20669) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(20685..20694) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(20695..20697) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(20713..20722) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: zs, span: bytes(20723..20725) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(20763..20766) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(20768..20771) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(20772..20774) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(20775..20778) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(20782..20785) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(20787..20790) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(20791..20793) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(20794..20797) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: zs, span: bytes(20801..20803) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(20804..20807) }, turbofish: None, paren_token: Paren, args: [] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(20998..21002) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(21004..21013) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(21014..21015) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(21030..21034) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(21036..21045) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(21046..21047) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(21062..21066) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(21068..21077) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: z, span: bytes(21078..21079) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(21306..21310) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(21312..21321) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(21322..21326) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(21459..21463) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(21465..21474) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(21475..21478) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(21704..21708) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(21710..21719) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(21720..21724) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(21857..21861) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(21863..21872) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(21873..21876) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(22009..22013) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(22015..22024) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(22025..22029) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(22045..22049) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(22051..22060) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 10 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(22169..22173) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(22175..22184) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(22185..22188) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(22322..22326) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(22328..22337) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(22338..22342) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(22358..22362) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(22364..22373) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 10 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(22490..22494) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(22496..22505) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(22506..22509) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(22659..22663) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(22665..22674) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(22676..22680) }, arguments: None }] } }), bracket_token: Bracket, index: Range(ExprRange { attrs: [], from: Some(Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) })), limits: HalfOpen(Dot2), to: None }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(22703..22707) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(22709..22718) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(22720..22724) }, arguments: None }] } }), bracket_token: Bracket, index: Range(ExprRange { attrs: [], from: None, limits: HalfOpen(Dot2), to: Some(Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(22727..22728) }, arguments: None }] } }), op: Sub(Sub), right: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) }) })) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: itertools, span: bytes(22760..22769) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: equal, span: bytes(22771..22776) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: alpha, span: bytes(22777..22782) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: beta, span: bytes(22784..22788) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(23233..23237) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(23239..23248) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data1, span: bytes(23249..23254) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(23273..23277) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(23279..23288) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data2, span: bytes(23289..23294) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(23798..23802) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(23804..23813) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data1, span: bytes(23814..23819) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(23838..23842) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(23844..23853) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data2, span: bytes(23854..23859) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(24381..24385) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(24387..24396) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data1, span: bytes(24397..24402) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(24421..24425) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(24427..24436) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data2, span: bytes(24437..24442) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(24966..24970) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(24972..24981) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data1, span: bytes(24982..24987) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(25006..25010) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(25012..25021) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data2, span: bytes(25022..25027) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: rng, span: bytes(25434..25437) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: state, span: bytes(25443..25448) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(25479..25482) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(25484..25487) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: rng, span: bytes(25580..25583) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: state, span: bytes(25589..25594) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(25627..25630) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(25632..25635) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: rest, span: bytes(25636..25640) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(25641..25644) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Cast(ExprCast { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: chunk_len, span: bytes(25648..25657) }, arguments: None }] } }), as_token: As, ty: Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(25661..25666) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: Some(QSelf { lt_token: Lt, ty: Infer(TypeInfer { underscore_token: Underscore }), position: 0, as_token: None, gt_token: Gt }), path: Path { leading_colon: Some(Colon2), segments: [PathSegment { ident: Ident { sym: default, span: bytes(26140..26147) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: fast_integer_sum, span: bytes(26268..26284) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cloned, span: bytes(26285..26291) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(26292..26293) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: iter, span: bytes(26294..26298) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: step, span: bytes(26301..26305) }, turbofish: None, paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 2 }) })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: fast_integer_sum, span: bytes(26422..26438) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cloned, span: bytes(26439..26445) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(26446..26447) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: iter, span: bytes(26448..26452) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: step, span: bytes(26455..26459) }, turbofish: None, paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 10 }) })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(26539..26548) }, arguments: None }] } }), paren_token: Paren, args: [Range(ExprRange { attrs: [], from: Some(Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })), limits: HalfOpen(Dot2), to: Some(Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1024 }) })) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: fast_integer_sum, span: bytes(26583..26599) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(26600..26601) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(26602..26607) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: step, span: bytes(26610..26614) }, turbofish: None, paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 2 }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(26693..26702) }, arguments: None }] } }), paren_token: Paren, args: [Range(ExprRange { attrs: [], from: Some(Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })), limits: HalfOpen(Dot2), to: Some(Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1024 }) })) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: fast_integer_sum, span: bytes(26737..26753) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(26754..26755) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(26756..26761) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: step, span: bytes(26764..26768) }, turbofish: None, paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 10 }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(41349..41353) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(41354..41359) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(41360..41365) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(41398..41403) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(41404..41409) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(41410..41415) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(42913..42917) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(42918..42919) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(43408..43412) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(43413..43414) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(43880..43884) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(43885..43890) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(43925..43930) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(43931..43936) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(44575..44579) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(44580..44585) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(44624..44629) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(44630..44635) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Pin, span: bytes(45033..45036) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: get_ref, span: bytes(45038..45045) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(45046..45050) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(45089..45093) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Pin, span: bytes(45094..45097) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new_unchecked, span: bytes(45099..45112) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(45113..45118) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(45158..45163) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Pin, span: bytes(45164..45167) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new_unchecked, span: bytes(45169..45182) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(45183..45188) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Pin, span: bytes(45864..45867) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: get_unchecked_mut, span: bytes(45869..45886) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(45887..45891) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(45934..45938) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Pin, span: bytes(45939..45942) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new_unchecked, span: bytes(45944..45957) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(45958..45963) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(46007..46012) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Pin, span: bytes(46013..46016) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new_unchecked, span: bytes(46018..46031) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(46032..46037) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(46477..46482) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(46483..46484) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(46511..46515) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(46516..46517) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(47083..47087) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(47088..47089) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(47090..47091) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(47119..47124) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(47125..47126) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(47697..47701) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(47702..47703) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(47730..47735) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(47736..47737) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(47738..47739) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(48570..48574) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(48575..48576) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(48577..48578) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(48606..48611) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(48612..48613) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(48614..48615) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(49640..49644) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(49645..49646) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ctx, span: bytes(49647..49650) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(49652..49653) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(49681..49686) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(49687..49688) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ctx, span: bytes(49689..49692) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(49694..49695) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(50476..50477) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(50478..50479) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(50506..50507) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(50508..50509) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(51331..51332) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ctx, span: bytes(51333..51336) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(51338..51339) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(51366..51367) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ctx, span: bytes(51368..51371) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(51373..51374) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(51958..51959) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(51960..51961) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(51988..51993) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(51994..51995) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(52565..52569) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(52570..52571) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(52598..52599) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(52600..52601) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(53188..53192) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(53193..53194) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(53195..53204) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(53233..53238) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(53239..53240) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(53241..53250) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: L, span: bytes(54547..54548) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: default, span: bytes(54550..54557) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(55143..55144) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(55145..55146) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: R, span: bytes(56414..56415) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: default, span: bytes(56417..56424) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(57015..57016) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(57017..57018) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(63350..63354) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(63355..63356) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(63393..63398) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(63399..63400) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(64013..64017) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(64018..64019) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(64056..64061) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(64062..64063) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(64949..64953) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(64954..64955) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(64956..64957) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(64985..64990) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(64991..64992) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(64993..64994) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(65221..65225) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: e, span: bytes(65226..65227) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(65251..65256) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: o, span: bytes(65257..65258) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(65555..65558) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(65559..65560) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(65587..65589) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(65590..65591) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: check_array_ref, span: bytes(78883..78898) }, arguments: AngleBracketed(AngleBracketedGenericArguments { colon2_token: Some(Colon2), lt_token: Lt, args: [Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Either, span: bytes(78901..78907) }, arguments: AngleBracketed(AngleBracketedGenericArguments { colon2_token: None, lt_token: Lt, args: [Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T1, span: bytes(78908..78910) }, arguments: None }] } })), Comma, Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T2, span: bytes(78912..78914) }, arguments: None }] } }))], gt_token: Gt }) }] } })), Comma, Type(Infer(TypeInfer { underscore_token: Underscore }))], gt_token: Gt }) }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: check_array_mut, span: bytes(79012..79027) }, arguments: AngleBracketed(AngleBracketedGenericArguments { colon2_token: Some(Colon2), lt_token: Lt, args: [Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Either, span: bytes(79030..79036) }, arguments: AngleBracketed(AngleBracketedGenericArguments { colon2_token: None, lt_token: Lt, args: [Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T1, span: bytes(79037..79039) }, arguments: None }] } })), Comma, Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T2, span: bytes(79041..79043) }, arguments: None }] } }))], gt_token: Gt }) }] } })), Comma, Type(Infer(TypeInfer { underscore_token: Underscore }))], gt_token: Gt }) }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(14025..14034) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add, span: bytes(14036..14039) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(14040..14044) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: a, span: bytes(14045..14046) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(14047..14056) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(14060..14064) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: b, span: bytes(14065..14066) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(14067..14076) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50255..50260) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(50262..50271) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(50272..50273) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50299..50304) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(50306..50315) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(50316..50317) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50429..50434) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max_value, span: bytes(50436..50445) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(50490..50495) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max_value, span: bytes(50497..50506) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Box, span: bytes(50828..50831) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(50833..50836) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: underestimate_value, span: bytes(50850..50869) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: shrink, span: bytes(50870..50876) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: flat_map, span: bytes(50879..50887) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: Some(Move), or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: ue_value, span: bytes(50894..50902) }, subpat: None })], or2_token: Or, output: Default, body: MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: overestimate_value, span: bytes(50920..50938) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: shrink, span: bytes(50939..50945) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: map, span: bytes(50948..50951) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: Some(Move), or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: oe_value, span: bytes(50958..50966) }, subpat: None })], or2_token: Or, output: Default, body: Struct(ExprStruct { attrs: [], path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Inexact, span: bytes(50988..50995) }, arguments: None }] }, brace_token: Brace, fields: [FieldValue { attrs: [], member: Named(Ident { sym: underestimate, span: bytes(51022..51035) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ue_value, span: bytes(51037..51045) }, arguments: None }] } }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: overestimate, span: bytes(51071..51083) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: oe_value, span: bytes(51085..51093) }, arguments: None }] } }) }, Comma], dot2_token: None, rest: None }) })] }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(52281..52285) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Default, span: bytes(52286..52293) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: default, span: bytes(52295..52302) }, arguments: None }] } }), paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(16022..16031) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: mul_scalar, span: bytes(16033..16043) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(16044..16053) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(16055..16058) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: curr_hint, span: bytes(16059..16068) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: next_hint, span: bytes(16070..16079) }, arguments: None }] } })] }), Comma, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 2 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Iter, span: bytes(53043..53047) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(53049..53052) }, arguments: None }] } }), paren_token: Paren, args: [Range(ExprRange { attrs: [], from: Some(Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(53053..53054) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(53056..53065) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(53066..53067) }, arguments: None }] } })] })), limits: HalfOpen(Dot2), to: Some(Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(53070..53071) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(53073..53082) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(53083..53084) }, arguments: None }] } })] })) }), Comma, Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HK, span: bytes(53087..53089) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(53091..53100) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(53101..53102) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Box, span: bytes(53261..53264) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(53266..53269) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(53283..53284) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: start, span: bytes(53285..53290) }) }), dot_token: Dot, method: Ident { sym: shrink, span: bytes(53291..53297) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: flat_map, span: bytes(53300..53308) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: Some(Move), or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: a, span: bytes(53315..53316) }, subpat: None })], or2_token: Or, output: Default, body: MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(53334..53335) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: end, span: bytes(53336..53339) }) }), dot_token: Dot, method: Ident { sym: shrink, span: bytes(53340..53346) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: map, span: bytes(53349..53352) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: Some(Move), or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: b, span: bytes(53359..53360) }, subpat: None })], or2_token: Or, output: Default, body: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Iter, span: bytes(53382..53386) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(53388..53391) }, arguments: None }] } }), paren_token: Paren, args: [Range(ExprRange { attrs: [], from: Some(MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(53392..53393) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(53394..53399) }, turbofish: None, paren_token: Paren, args: [] })), limits: HalfOpen(Dot2), to: Some(Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(53403..53404) }, arguments: None }] } })) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: hint_kind, span: bytes(53406..53415) }, arguments: None }] } })] }) })] }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Iter, span: bytes(54004..54008) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(54010..54013) }, arguments: None }] } }), paren_token: Paren, args: [Range(ExprRange { attrs: [], from: Some(Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(54014..54018) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: range_start, span: bytes(54019..54030) }) })), limits: HalfOpen(Dot2), to: Some(Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(54032..54036) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: range_end, span: bytes(54037..54046) }) })) }), Comma, Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(54048..54052) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: hint_kind, span: bytes(54053..54062) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(54191..54195) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(54196..54200) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: qc, span: bytes(54533..54535) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Arbitrary, span: bytes(54537..54546) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(54548..54557) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(54558..54559) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: qc, span: bytes(54882..54884) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Arbitrary, span: bytes(54886..54895) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(54897..54906) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(54907..54908) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(17768..17772) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(17773..17774) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(55317..55320) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(55322..55335) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: initial_hint, span: bytes(55336..55348) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(55349..55350) }) }), op: Add(Add), right: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(18189..18198) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(18200..18210) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(18211..18215) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(18216..18220) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(18221..18230) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Cast(ExprCast { attrs: [], expr: MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(18234..18238) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: top, span: bytes(18239..18242) }) }), dot_token: Dot, method: Ident { sym: is_some, span: bytes(18243..18250) }, turbofish: None, paren_token: Paren, args: [] }), as_token: As, ty: Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(18256..18261) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(56034..56038) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: low, span: bytes(56039..56042) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(18423..18424) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(18425..18428) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(56240..56244) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: low, span: bytes(56245..56248) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(56338..56342) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(56541..56545) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: low, span: bytes(56546..56549) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(18725..18726) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accum, span: bytes(18727..18732) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(18734..18737) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(56747..56751) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: low, span: bytes(56752..56755) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(56845..56849) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: Some(QSelf { lt_token: Lt, ty: Tuple(TypeTuple { paren_token: Paren, elems: [Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: u32, span: bytes(76650..76653) }, arguments: None }] } }), Comma, Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: u32, span: bytes(76655..76658) }, arguments: None }] } })] }), position: 0, as_token: None, gt_token: Gt }), path: Path { leading_colon: Some(Colon2), segments: [PathSegment { ident: Ident { sym: arbitrary, span: bytes(76662..76671) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(76672..76673) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Val, span: bytes(76684..76687) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(76688..76689) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(76691..76692) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Box, span: bytes(76761..76764) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(76766..76769) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(76771..76775) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(76776..76777) }) }), Comma, Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(76779..76783) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 1, span: bytes(76784..76785) }) })] }), dot_token: Dot, method: Ident { sym: shrink, span: bytes(76787..76793) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: map, span: bytes(76796..76799) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Tuple(PatTuple { attrs: [], paren_token: Paren, elems: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: x, span: bytes(76802..76803) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: y, span: bytes(76805..76806) }, subpat: None })] })], or2_token: Or, output: Default, body: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Val, span: bytes(76809..76812) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(76813..76814) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(76816..76817) }, arguments: None }] } })] }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(20334..20338) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(20340..20341) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(20342..20347) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt_b, span: bytes(20351..20356) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(20689..20698) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add, span: bytes(20700..20703) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(20717..20726) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: mul, span: bytes(20728..20731) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(20732..20736) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: a, span: bytes(20737..20738) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(20739..20748) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(20752..20756) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: b_orig, span: bytes(20757..20763) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(20764..20773) }, turbofish: None, paren_token: Paren, args: [] })] }), Comma, Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b_min, span: bytes(20791..20796) }, arguments: None }] } }), op: Mul(Star), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: has_cur, span: bytes(20799..20806) }, arguments: None }] } }) }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b_max, span: bytes(20808..20813) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: map, span: bytes(20814..20817) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: Some(Move), or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: x, span: bytes(20824..20825) }, subpat: None })], or2_token: Or, output: Default, body: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(20827..20828) }, arguments: None }] } }), op: Mul(Star), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: has_cur, span: bytes(20831..20838) }, arguments: None }] } }) }) })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(21228..21229) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(21230..21233) }, arguments: None }] } }), Comma, Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(21236..21237) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(21238..21243) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(21247..21250) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(22492..22496) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(22497..22498) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(22505..22509) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(22510..22514) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: div, span: bytes(24029..24032) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: low, span: bytes(24033..24036) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: merge_by_new, span: bytes(25283..25295) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(25296..25297) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(25299..25300) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MergeLte, span: bytes(25302..25310) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(26164..26168) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(26169..26170) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(26172..26173) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(27310..27314) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Bool(LitBool { value: true }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(27435..27439) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Bool(LitBool { value: false }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(27802..27811) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add, span: bytes(27813..27816) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(27817..27821) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: a, span: bytes(27822..27823) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(27824..27833) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(27837..27841) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: b, span: bytes(27842..27843) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(27844..27853) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(28386..28387) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: last, span: bytes(28388..28392) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: next, span: bytes(28394..28398) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(28520..28524) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: next_, span: bytes(28525..28530) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(28560..28564) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: last_, span: bytes(28565..28570) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(28624..28628) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: last, span: bytes(28629..28633) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(28718..28727) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(28729..28739) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(28740..28744) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(28745..28749) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(28750..28759) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Cast(ExprCast { attrs: [], expr: MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(28809..28813) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: last, span: bytes(28814..28818) }) }), dot_token: Dot, method: Ident { sym: is_some, span: bytes(28819..28826) }, turbofish: None, paren_token: Paren, args: [] }), as_token: As, ty: Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(28832..28837) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(30992..30996) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(30997..30998) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(31000..31001) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: dedup_by, span: bytes(31753..31761) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(31762..31766) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: DedupEq, span: bytes(31768..31775) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(32278..32280) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(32281..32282) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(32293..32296) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(32298..32299) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(32301..32302) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(32811..32812) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(32813..32816) }, arguments: None }] } }), Comma, Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: replace, span: bytes(32818..32825) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: last, span: bytes(32831..32835) }, arguments: None }] } }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(32837..32840) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(32889..32890) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accum, span: bytes(32891..32896) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: last, span: bytes(32898..32902) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(34026..34030) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(34031..34032) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(34035..34038) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(34062..34066) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(34067..34070) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(36036..36037) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Combination, span: bytes(36039..36050) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from, span: bytes(36052..36056) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(36057..36061) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: fold_f, span: bytes(39785..39791) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(39792..39795) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(39797..39798) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into, span: bytes(39799..39803) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: fold_f, span: bytes(41259..41265) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(41266..41269) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(41271..41272) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: map, span: bytes(41273..41276) }, turbofish: None, paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(41282..41283) }, arguments: None }] } }) })] })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(42325..42329) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(42330..42331) }) }) }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(42333..42334) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(42361..42365) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(42366..42367) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(42776..42780) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(42781..42782) }) }) }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(42784..42785) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(42812..42816) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(42817..42821) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: count, span: bytes(42822..42827) }) }), op: Add(Add), right: MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(42830..42834) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(42835..42839) }) }), dot_token: Dot, method: Ident { sym: len, span: bytes(42840..42843) }, turbofish: None, paren_token: Paren, args: [] }) })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(43594..43598) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(43599..43600) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(43607..43608) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(43623..43627) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(43628..43629) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(43956..43957) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(43963..43964) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(43967..43968) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(43969..43972) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(43974..43975) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(44198..44199) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(44205..44206) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(44573..44577) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(44578..44579) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(44586..44587) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(44602..44606) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(44607..44608) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: interleave, span: bytes(29138..29148) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(29149..29153) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(29155..29160) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(29688..29696) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: interleave_shortest, span: bytes(29698..29717) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(29718..29722) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(29724..29729) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(29730..29739) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: intersperse, span: bytes(30249..30260) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: intersperse, span: bytes(30262..30273) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(30274..30278) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: element, span: bytes(30280..30287) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: zip_longest, span: bytes(31505..31516) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: zip_longest, span: bytes(31518..31529) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(31530..31534) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(31536..31541) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(31542..31551) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: zip_eq, span: bytes(31944..31950) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(31951..31955) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(31957..31962) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(32873..32881) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: batching, span: bytes(32883..32891) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(32892..32896) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(32898..32899) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: groupbylazy, span: bytes(34535..34546) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(34548..34551) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(34552..34556) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(34558..34561) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: groupbylazy, span: bytes(35774..35785) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new_chunks, span: bytes(35787..35797) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(35798..35802) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size, span: bytes(35804..35808) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: tuple_impl, span: bytes(37209..37219) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: tuple_windows, span: bytes(37221..37234) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(37235..37239) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: tuple_impl, span: bytes(38488..38498) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: tuples, span: bytes(38500..38506) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(38507..38511) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: tee, span: bytes(39267..39270) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(39272..39275) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(39276..39280) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(39965..39973) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: step, span: bytes(39975..39979) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(39980..39984) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: n, span: bytes(39986..39987) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(40316..40324) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: map_into, span: bytes(40326..40334) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(40335..40339) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(40927..40935) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: map_results, span: bytes(40937..40948) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(40949..40953) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(40955..40956) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: merge, span: bytes(41618..41623) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(41624..41628) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(41630..41635) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(42444..42452) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: merge_by_new, span: bytes(42454..42466) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(42467..42471) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(42473..42478) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(42479..42488) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: is_first, span: bytes(42492..42500) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: merge_join_by, span: bytes(44041..44054) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(44055..44059) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(44061..44066) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp_fn, span: bytes(44068..44074) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: kmerge, span: bytes(44870..44876) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(44877..44881) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: kmerge_by, span: bytes(45976..45985) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(45986..45990) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(45992..45997) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(46635..46643) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: cartesian_product, span: bytes(46645..46662) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(46663..46667) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(46669..46674) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(46675..46684) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(48197..48205) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: multi_cartesian_product, span: bytes(48207..48230) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(48231..48235) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(49622..49630) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: coalesce, span: bytes(49632..49640) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(49641..49645) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(49647..49648) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(50245..50253) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: dedup, span: bytes(50255..50260) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(50261..50265) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(51039..51047) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: dedup_by, span: bytes(51049..51057) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(51058..51062) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(51064..51067) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: unique_impl, span: bytes(51752..51763) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: unique, span: bytes(51765..51771) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(51772..51776) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: unique_impl, span: bytes(52563..52574) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: unique_by, span: bytes(52576..52585) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(52586..52590) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(52592..52593) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: peeking_take_while, span: bytes(53320..53338) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: peeking_take_while, span: bytes(53340..53358) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(53359..53363) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(53365..53371) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(54261..54269) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: take_while_ref, span: bytes(54271..54285) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(54286..54290) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(54292..54298) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(54899..54907) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: while_some, span: bytes(54909..54919) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(54920..54924) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(56421..56429) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: tuple_combinations, span: bytes(56431..56449) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(56450..56454) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: combinations, span: bytes(57595..57607) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: combinations, span: bytes(57609..57621) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(57622..57626) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: n, span: bytes(57628..57629) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: pad_tail, span: bytes(58456..58464) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: pad_using, span: bytes(58466..58475) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(58476..58480) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min, span: bytes(58482..58485) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(58487..58488) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: with_position, span: bytes(59330..59343) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_position, span: bytes(59345..59358) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(59359..59363) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(60079..60087) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: positions, span: bytes(60089..60098) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(60099..60103) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: predicate, span: bytes(60105..60114) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(60630..60638) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: update, span: bytes(60640..60646) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(60647..60651) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: updater, span: bytes(60653..60660) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(61280..61281) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: collect_from_iter_no_buf, span: bytes(61283..61307) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(61308..61312) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: pred, span: bytes(62771..62775) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(62777..62780) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(62807..62811) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: index, span: bytes(62813..62818) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(62820..62823) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: concat, span: bytes(66437..66443) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(66444..66448) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: String, span: bytes(68110..68116) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(68118..68121) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: String, span: bytes(68301..68307) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(68309..68322) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sep, span: bytes(68323..68326) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(68327..68330) }, turbofish: None, paren_token: Paren, args: [] }), op: Mul(Star), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lower, span: bytes(68335..68340) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: format, span: bytes(69188..69194) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new_format_default, span: bytes(69196..69214) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(69215..69219) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sep, span: bytes(69221..69224) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: format, span: bytes(70791..70797) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new_format, span: bytes(70799..70809) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(70810..70814) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sep, span: bytes(70816..70819) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: format, span: bytes(70821..70827) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(72574..72575) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: start, span: bytes(72576..72581) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(72583..72584) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(72620..72623) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: u, span: bytes(72624..72625) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(72660..72662) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: start, span: bytes(72663..72668) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(73736..73737) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: start, span: bytes(73738..73743) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(73745..73746) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(73818..73822) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: start, span: bytes(73823..73828) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(76912..76915) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(76916..76920) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(77024..77027) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(77028..77032) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(77033..77034) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(77052..77054) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(77055..77056) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(77057..77058) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(77060..77061) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner0, span: bytes(77591..77597) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: it, span: bytes(77598..77600) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(77602..77603) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(77658..77663) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: height, span: bytes(77664..77670) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: it, span: bytes(77672..77674) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(77676..77677) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(77764..77765) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(77766..77767) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(77769..77770) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(78118..78121) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(78122..78126) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(78127..78128) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(78175..78178) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(78179..78183) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(78184..78185) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(78186..78187) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(78189..78190) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(78239..78241) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(78242..78243) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(78270..78275) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(78276..78281) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max_value, span: bytes(78283..78292) }, arguments: None }] } }), paren_token: Paren, args: [] }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(78301..78305) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(78312..78313) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(80016..80017) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(80018..80021) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(80023..80027) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: FoldWhile, span: bytes(80174..80183) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Continue, span: bytes(80185..80193) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(80194..80197) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(81122..81125) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_iter, span: bytes(81127..81136) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(81137..81141) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(82297..82300) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_iter, span: bytes(82302..82311) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(82312..82316) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(83474..83477) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_iter, span: bytes(83479..83488) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(83489..83493) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: A, span: bytes(84504..84505) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: default, span: bytes(84507..84514) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: B, span: bytes(84542..84543) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: default, span: bytes(84545..84552) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: predicate, span: bytes(84601..84610) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: val, span: bytes(84611..84614) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(84665..84669) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(84670..84671) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(84724..84728) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(84729..84730) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: group_map, span: bytes(85526..85535) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: into_group_map, span: bytes(85537..85551) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(85552..85556) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: minmax, span: bytes(86966..86972) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: minmax_impl, span: bytes(86974..86985) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(86986..86990) }, arguments: None }] } }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Wild(PatWild { attrs: [], underscore_token: Underscore })], or2_token: Or, output: Default, body: Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [] }) }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: x, span: bytes(87001..87002) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: y, span: bytes(87004..87005) }, subpat: None }), Comma, Wild(PatWild { attrs: [], underscore_token: Underscore }), Comma, Wild(PatWild { attrs: [], underscore_token: Underscore })], or2_token: Or, output: Default, body: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(87013..87014) }, arguments: None }] } }), op: Lt(Lt), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(87017..87018) }, arguments: None }] } }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: minmax, span: bytes(87708..87714) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: minmax_impl, span: bytes(87716..87727) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(87728..87732) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(87734..87737) }, arguments: None }] } }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Wild(PatWild { attrs: [], underscore_token: Underscore }), Comma, Wild(PatWild { attrs: [], underscore_token: Underscore }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: xk, span: bytes(87746..87748) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: yk, span: bytes(87750..87752) }, subpat: None })], or2_token: Or, output: Default, body: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xk, span: bytes(87754..87756) }, arguments: None }] } }), op: Lt(Lt), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: yk, span: bytes(87759..87761) }, arguments: None }] } }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: minmax, span: bytes(88365..88371) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: minmax_impl, span: bytes(88373..88384) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(88398..88402) }, arguments: None }] } }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Wild(PatWild { attrs: [], underscore_token: Underscore })], or2_token: Or, output: Default, body: Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [] }) }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: x, span: bytes(88437..88438) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: y, span: bytes(88440..88441) }, subpat: None }), Comma, Wild(PatWild { attrs: [], underscore_token: Underscore }), Comma, Wild(PatWild { attrs: [], underscore_token: Underscore })], or2_token: Or, output: Default, body: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ordering, span: bytes(88449..88457) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Less, span: bytes(88459..88463) }, arguments: None }] } }), op: Eq(EqEq), right: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: compare, span: bytes(88467..88474) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(88475..88476) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(88478..88479) }, arguments: None }] } })] }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(89681..89684) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ExactlyOneError, span: bytes(89685..89700) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(89702..89705) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(89707..89711) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(89712..89717) }, arguments: None }] } })] }), Comma, Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(89720..89724) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second, span: bytes(89725..89731) }, arguments: None }] } })] })] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(89735..89739) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(89818..89820) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(89821..89826) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(89902..89905) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ExactlyOneError, span: bytes(89906..89921) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(89923..89926) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(89928..89932) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(89934..89938) }, arguments: None }] } })] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(89941..89945) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: pred, span: bytes(92791..92795) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: front, span: bytes(92796..92801) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: pred, span: bytes(92902..92906) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: back, span: bytes(92907..92911) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(92939..92942) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: mem, span: bytes(92944..92947) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: swap, span: bytes(92949..92953) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: front, span: bytes(92954..92959) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: back, span: bytes(92961..92965) }, arguments: None }] } })] }

Metric output format: x/y
    x = unsafe code used by the build
    y = total unsafe code found in the crate

Symbols: 
    :) = No `unsafe` usage found, declares #![forbid(unsafe_code)]
    ?  = No `unsafe` usage found, missing #![forbid(unsafe_code)]
    !  = `unsafe` usage found

Functions  Expressions  Impls  Traits  Methods  Dependency

0/0        0/0          0/0    0/0     0/0      ?  test9_package_with_git_deps 0.1.0
0/0        0/55         0/3    0/1     0/3      ?  ├── itertools 0.8.0
0/0        4/4          0/0    0/0     0/0      !  │   └── either 1.9.0
0/0        0/0          0/0    0/0     0/0      ?  └── ref_slice 1.2.1

0/0        4/59         0/3    0/1     0/3    


