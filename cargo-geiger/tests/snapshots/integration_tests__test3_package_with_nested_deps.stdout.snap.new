---
source: cargo-geiger/tests/integration_tests.rs
assertion_line: 50
expression: stdout
---
PackageId: PackageId { repr: "itertools 0.8.0 (git+https://github.com/rust-itertools/itertools.git?rev=8761fbefb3b209#8761fbefb3b209cf41829f8dba38044b69c1d8dd)" } {}
PackageId: PackageId { repr: "ref_slice 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)" } {}
PackageId: PackageId { repr: "test3_package_with_nested_deps 0.1.0 (path+file:///tmp/.tmpwvA3Rs/test3_package_with_nested_deps)" } {}
PackageId: PackageId { repr: "test1_package_with_no_deps 0.1.0 (path+file:///tmp/.tmpwvA3Rs/test1_package_with_no_deps)" } {}
PackageId: PackageId { repr: "either 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)" } {}
PackageId: PackageId { repr: "doc-comment 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)" } {}
PackageId: PackageId { repr: "test2_package_with_shallow_deps 0.1.0 (path+file:///tmp/.tmpwvA3Rs/test2_package_with_shallow_deps)" } {}
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HashMap, span: bytes(21210..21217) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(21219..21222) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(21292..21295) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(21297..21300) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: Some(QSelf { lt_token: Lt, ty: Infer(TypeInfer { underscore_token: Underscore }), position: 0, as_token: None, gt_token: Gt }), path: Path { leading_colon: Some(Colon2), segments: [PathSegment { ident: Ident { sym: default, span: bytes(7595..7602) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(15368..15372) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(15374..15375) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(15377..15378) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(15596..15605) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(15607..15610) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(15611..15615) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: a, span: bytes(15616..15617) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(15618..15627) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(15631..15635) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: b, span: bytes(15636..15637) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(15638..15647) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(35038..35042) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Diff, span: bytes(35043..35047) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Shorter, span: bytes(35049..35056) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: idx, span: bytes(35057..35060) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: put_back, span: bytes(35062..35070) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(35071..35072) }, arguments: None }] } })] }), dot_token: Dot, method: Ident { sym: with_value, span: bytes(35074..35084) }, turbofish: None, paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i_elem, span: bytes(35085..35091) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: is_equal, span: bytes(35128..35136) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i_elem, span: bytes(35138..35144) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j_elem, span: bytes(35147..35153) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: put_back, span: bytes(35191..35199) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(35200..35201) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: put_back, span: bytes(35257..35265) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(35266..35267) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(35312..35316) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Diff, span: bytes(35317..35321) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: FirstMismatch, span: bytes(35323..35336) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: idx, span: bytes(35337..35340) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: remaining_i, span: bytes(35342..35353) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: remaining_j, span: bytes(35355..35366) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: VecDeque, span: bytes(11768..11776) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(11778..11781) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(12275..12279) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: element, span: bytes(12280..12287) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Rc, span: bytes(11839..11841) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(11843..11846) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RefCell, span: bytes(11847..11854) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(11856..11859) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: buffer, span: bytes(11860..11866) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(12670..12674) }, arguments: None }] } }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(12675..12679) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: n, span: bytes(12680..12681) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Diff, span: bytes(35445..35449) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Longer, span: bytes(35451..35457) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: idx, span: bytes(35458..35461) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: put_back, span: bytes(35463..35471) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(35472..35473) }, arguments: None }] } })] }), dot_token: Dot, method: Ident { sym: with_value, span: bytes(35475..35485) }, turbofish: None, paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j_elem, span: bytes(35486..35492) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(12684..12688) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(12689..12692) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(12962..12971) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(12973..12983) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sh, span: bytes(12984..12986) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: log_len, span: bytes(12988..12995) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(35687..35691) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(35692..35696) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: element, span: bytes(35697..35704) }) }), dot_token: Dot, method: Ident { sym: clone, span: bytes(35705..35710) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(35971..35980) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(35982..35992) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(35993..36002) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add, span: bytes(36004..36007) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sh, span: bytes(36008..36010) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sh, span: bytes(36012..36014) }, arguments: None }] } })] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: has_peek, span: bytes(36017..36025) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(36252..36253) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accum, span: bytes(36254..36259) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(36261..36262) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(36397..36398) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accum, span: bytes(36399..36404) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: element, span: bytes(36406..36413) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(36414..36419) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(36452..36453) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accum, span: bytes(36454..36459) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(36461..36462) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(16906..16910) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(16911..16923) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Left, span: bytes(16925..16929) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(16930..16931) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(16966..16970) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(16971..16983) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Right, span: bytes(16985..16990) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(16991..16992) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(17030..17034) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(17035..17047) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Both, span: bytes(17049..17053) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(17054..17055) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(17057..17058) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(17153..17162) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max, span: bytes(17164..17167) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(17168..17172) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: a, span: bytes(17173..17174) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(17175..17184) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(17188..17192) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: b, span: bytes(17193..17194) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(17195..17204) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(17638..17642) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(17643..17655) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Both, span: bytes(17657..17661) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(17662..17663) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(17665..17666) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(17790..17794) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(17795..17807) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Left, span: bytes(17809..17813) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(17814..17815) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(17854..17858) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(17859..17871) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Right, span: bytes(17873..17878) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(17879..17880) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HashMap, span: bytes(6139..6146) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(6148..6151) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(6812..6816) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(6817..6818) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(6821..6822) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(6901..6905) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(6906..6907) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: count_new_keys, span: bytes(7201..7215) }, arguments: None }] } }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(7216..7220) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: used, span: bytes(7221..7225) }) }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(7227..7231) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(7232..7236) }) }), dot_token: Dot, method: Ident { sym: map, span: bytes(7237..7240) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: Some(Move), or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: elt, span: bytes(7247..7250) }, subpat: None })], or2_token: Or, output: Default, body: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key_f, span: bytes(7252..7257) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(7259..7262) }, arguments: None }] } }) })] }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(7662..7666) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(7667..7670) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: count_new_keys, span: bytes(7942..7956) }, arguments: None }] } }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(7957..7961) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(7962..7966) }) }), dot_token: Dot, member: Named(Ident { sym: used, span: bytes(7967..7971) }) }), Comma, Field(ExprField { attrs: [], base: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(7973..7977) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(7978..7982) }) }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(7983..7987) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HashMap, span: bytes(8634..8641) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(8643..8646) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(28077..28080) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(28082..28085) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(28086..28087) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(28088..28091) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(28095..28096) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(28097..28100) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(28613..28616) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(28618..28621) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(28622..28623) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(28624..28627) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(28631..28632) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(28633..28636) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(29132..29136) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(29159..29163) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: t, span: bytes(29164..29165) }) }), dot_token: Dot, method: Ident { sym: get_unchecked, span: bytes(29166..29179) }, turbofish: None, paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(29180..29181) }, arguments: None }] } })] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(29204..29208) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: u, span: bytes(29209..29210) }) }), dot_token: Dot, method: Ident { sym: get_unchecked, span: bytes(29211..29224) }, turbofish: None, paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(29225..29226) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(29382..29386) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: len, span: bytes(29387..29390) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(29748..29752) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(29775..29779) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: t, span: bytes(29780..29781) }) }), dot_token: Dot, method: Ident { sym: get_unchecked, span: bytes(29782..29795) }, turbofish: None, paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(29796..29797) }, arguments: None }] } })] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(29820..29824) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: u, span: bytes(29825..29826) }) }), dot_token: Dot, method: Ident { sym: get_unchecked, span: bytes(29827..29840) }, turbofish: None, paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(29841..29842) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(36356..36360) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(36361..36365) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(9472..9475) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(9477..9490) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: n, span: bytes(9491..9492) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: LazyBuffer, span: bytes(9580..9590) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(9592..9595) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(9596..9600) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(11242..11245) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(11247..11260) }, arguments: None }] } }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(11261..11265) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: n, span: bytes(11266..11267) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(11375..11379) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: result, span: bytes(11380..11386) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(11640..11643) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(11645..11648) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Zip, span: bytes(19622..19625) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from, span: bytes(19627..19631) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: t, span: bytes(19632..19633) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(81576..81579) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: mem, span: bytes(81581..81584) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: size_of, span: bytes(81586..81593) }, arguments: AngleBracketed(AngleBracketedGenericArguments { colon2_token: Some(Colon2), lt_token: Lt, args: [Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(81596..81601) }, arguments: None }] } }))], gt_token: Gt }) }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(81666..81669) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(81671..81684) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cap, span: bytes(81685..81688) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(81796..81797) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: stack, span: bytes(81798..81803) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: pop, span: bytes(81804..81807) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: unwrap, span: bytes(81810..81816) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(81820..81821) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(9616..9620) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Position, span: bytes(9621..9629) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: First, span: bytes(9631..9636) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(9637..9641) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(9677..9681) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Position, span: bytes(9682..9690) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Only, span: bytes(9692..9696) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(9697..9701) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(14536..14540) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: put_back, span: bytes(22234..22242) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(22243..22247) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(22248..22257) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: fuse, span: bytes(22260..22264) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: put_back, span: bytes(22284..22292) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(22293..22298) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(22299..22308) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: fuse, span: bytes(22311..22315) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(14999..15002) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max, span: bytes(15004..15007) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a_lower, span: bytes(15008..15015) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b_lower, span: bytes(15017..15024) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(15101..15105) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(15106..15109) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max, span: bytes(15111..15114) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(15115..15116) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(15118..15119) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(15336..15339) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(15341..15344) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a_lower, span: bytes(15345..15352) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b_lower, span: bytes(15354..15361) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(15439..15443) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(15444..15447) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(15449..15452) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: u1, span: bytes(15453..15455) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: u2, span: bytes(15457..15459) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(23369..23373) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(23374..23386) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Left, span: bytes(23388..23392) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(23393..23397) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(23452..23456) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(23457..23469) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Right, span: bytes(23471..23476) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(23477..23482) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(23552..23556) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: cmp_fn, span: bytes(23557..23563) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(23566..23570) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(23573..23578) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(23645..23649) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(23650..23662) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Both, span: bytes(23664..23668) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(23669..23673) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(23675..23680) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(23800..23804) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(23805..23817) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Left, span: bytes(23819..23823) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(23824..23828) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(23971..23975) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: EitherOrBoth, span: bytes(23976..23988) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Right, span: bytes(23990..23995) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(23996..24001) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: Some(Colon2), segments: [PathSegment { ident: Ident { sym: std, span: bytes(24263..24266) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: cmp, span: bytes(24268..24271) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max, span: bytes(24273..24276) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a_lower, span: bytes(24277..24284) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b_lower, span: bytes(24286..24293) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(24378..24382) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(24383..24384) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(24387..24388) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(36604..36608) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(36609..36614) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(36830..36834) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(36835..36839) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(36874..36879) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(36880..36885) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Both, span: bytes(36929..36933) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(36934..36938) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(36940..36945) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(37167..37171) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(37172..37176) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(37215..37220) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(37221..37226) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Both, span: bytes(37278..37282) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: left, span: bytes(37283..37287) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(37289..37294) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(9974..9978) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Position, span: bytes(9979..9987) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Middle, span: bytes(9989..9995) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(9996..10000) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(10036..10040) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Position, span: bytes(10041..10049) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Last, span: bytes(10051..10055) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(10056..10060) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(10109..10118) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(10120..10130) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(10131..10135) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: inner, span: bytes(10136..10141) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(10142..10151) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: additional_len, span: bytes(10155..10169) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(22737..22741) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(22743..22744) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(22745..22750) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(22754..22755) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(22801..22805) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(22807..22808) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(22810..22811) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MinMaxResult, span: bytes(23336..23348) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: OneElement, span: bytes(23350..23360) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(23361..23362) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key_for, span: bytes(23423..23430) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(23432..23433) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key_for, span: bytes(23465..23472) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(23474..23475) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(23502..23504) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(23506..23507) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(23510..23511) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: yk, span: bytes(23514..23516) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xk, span: bytes(23519..23521) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key_for, span: bytes(24139..24146) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(24148..24153) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(24175..24177) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(24179..24184) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min, span: bytes(24187..24190) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first_key, span: bytes(24193..24202) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_key, span: bytes(24205..24212) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(24276..24278) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(24280..24285) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max, span: bytes(24288..24291) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first_key, span: bytes(24294..24303) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max_key, span: bytes(24306..24313) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key_for, span: bytes(24465..24472) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(24474..24479) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key_for, span: bytes(24507..24514) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second, span: bytes(24516..24522) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(24537..24539) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second, span: bytes(24541..24547) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(24550..24555) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second_key, span: bytes(24558..24568) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first_key, span: bytes(24571..24580) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(24599..24601) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(24603..24608) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min, span: bytes(24611..24614) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first_key, span: bytes(24617..24626) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_key, span: bytes(24629..24636) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(24736..24738) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second, span: bytes(24740..24746) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max, span: bytes(24749..24752) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second_key, span: bytes(24755..24765) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max_key, span: bytes(24768..24775) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(24893..24895) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second, span: bytes(24897..24903) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min, span: bytes(24906..24909) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second_key, span: bytes(24912..24922) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_key, span: bytes(24925..24932) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lt, span: bytes(25034..25036) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(25038..25043) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max, span: bytes(25046..25049) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first_key, span: bytes(25052..25061) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max_key, span: bytes(25064..25071) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MinMaxResult, span: bytes(25176..25188) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: MinMax, span: bytes(25190..25196) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min, span: bytes(25197..25200) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max, span: bytes(25202..25205) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(14317..14321) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: len, span: bytes(14322..14325) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Default, span: bytes(14974..14981) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: default, span: bytes(14983..14990) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(15173..15174) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: collect_from_iter, span: bytes(15176..15193) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(15199..15203) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(15204..15208) }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(15215..15219) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: buf, span: bytes(15220..15223) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: TupleBuffer, span: bytes(15744..15755) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(15757..15760) }, arguments: None }] } }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(15761..15765) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: buf, span: bytes(15766..15769) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(16450..16451) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: num_items, span: bytes(16453..16462) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: once, span: bytes(16640..16644) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(16645..16649) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(16650..16655) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: once, span: bytes(16665..16669) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(16670..16674) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Unspecialized, span: bytes(32973..32986) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: arr, span: bytes(32987..32990) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(32991..33000) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: intersperse, span: bytes(33003..33014) }, turbofish: None, paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(16714..16715) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: collect_from_iter_no_buf, span: bytes(16717..16741) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(16742..16746) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(17047..17048) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: num_items, span: bytes(17050..17059) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(17088..17089) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: collect_from_iter_no_buf, span: bytes(17091..17115) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(17121..17125) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(17126..17130) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(17306..17310) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: last, span: bytes(17311..17315) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(17316..17321) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(21636..21640) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(21642..21646) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(21647..21648) }) }) }), paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(21721..21726) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max_value, span: bytes(21728..21737) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: core, span: bytes(10615..10619) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: slice, span: bytes(10621..10626) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_raw_parts, span: bytes(10628..10642) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(10643..10644) }, arguments: None }] } }), Comma, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: core, span: bytes(10804..10808) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: slice, span: bytes(10810..10815) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_raw_parts_mut, span: bytes(10817..10835) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(10836..10837) }, arguments: None }] } }), Comma, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ref_slice, span: bytes(11029..11038) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: val, span: bytes(11039..11042) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(23724..23728) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(23729..23730) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(23737..23741) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: state, span: bytes(23742..23747) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: mut_ref_slice, span: bytes(11269..11282) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: val, span: bytes(11283..11286) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(24546..24550) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(24551..24552) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(24555..24559) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: state, span: bytes(24560..24565) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(24576..24580) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: mem, span: bytes(24581..24584) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: replace, span: bytes(24586..24593) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(24599..24603) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: state, span: bytes(24604..24609) }) }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: next_state, span: bytes(24611..24621) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(24706..24711) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max_value, span: bytes(24713..24722) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(37794..37798) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: replace, span: bytes(37799..37806) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(37812..37816) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(37817..37821) }) }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: next, span: bytes(37823..37827) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(38015..38024) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(38026..38036) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(38037..38041) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: tail, span: bytes(38042..38046) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(38047..38056) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sift_down, span: bytes(38439..38448) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(38449..38453) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(38455..38456) }, arguments: None }] } }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: less_than, span: bytes(38463..38472) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: less_than, span: bytes(38979..38988) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heap, span: bytes(38990..38994) }, arguments: None }] } }), bracket_token: Bracket, index: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: right, span: bytes(38995..39000) }, arguments: None }] } }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heap, span: bytes(39004..39008) }, arguments: None }] } }), bracket_token: Bracket, index: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: child, span: bytes(39009..39014) }, arguments: None }] } }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: less_than, span: bytes(39125..39134) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heap, span: bytes(39136..39140) }, arguments: None }] } }), bracket_token: Bracket, index: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: child, span: bytes(39141..39146) }, arguments: None }] } }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heap, span: bytes(39150..39154) }, arguments: None }] } }), bracket_token: Bracket, index: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: pos, span: bytes(39155..39158) }, arguments: None }] } }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(40489..40492) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(40494..40507) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lower, span: bytes(40508..40513) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HeadTail, span: bytes(40553..40561) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(40563..40566) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: it, span: bytes(40567..40569) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(40570..40579) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heapify, span: bytes(40590..40597) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heap, span: bytes(40603..40607) }, arguments: None }] } }) }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: a, span: bytes(40610..40611) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: b, span: bytes(40613..40614) }, subpat: None })], or2_token: Or, output: Default, body: Binary(ExprBinary { attrs: [], left: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(40616..40617) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(40618..40622) }) }), op: Lt(Lt), right: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(40625..40626) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(40627..40631) }) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sift_down, span: bytes(41221..41230) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(41236..41240) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: heap, span: bytes(41241..41245) }) }) }), Comma, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: a, span: bytes(41251..41252) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: b, span: bytes(41254..41255) }, subpat: None })], or2_token: Or, output: Default, body: Binary(ExprBinary { attrs: [], left: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(41257..41258) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(41259..41263) }) }), op: Lt(Lt), right: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(41266..41267) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(41268..41272) }) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(41283..41287) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: result, span: bytes(41288..41294) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RefCell, span: bytes(11391..11398) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(11400..11403) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(11404..11408) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(11410..11414) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(11416..11417) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RefCell, span: bytes(11587..11594) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(11596..11599) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(11600..11604) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(11605..11609) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(41493..41497) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test1_package_with_no_deps, span: bytes(37366..37392) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: f, span: bytes(37394..37395) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test1_package_with_no_deps, span: bytes(37403..37429) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: g, span: bytes(37431..37432) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(12385..12387) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(13044..13046) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(42655..42658) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(42660..42673) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lower, span: bytes(42674..42679) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HeadTail, span: bytes(42719..42727) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(42729..42732) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: it, span: bytes(42733..42735) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(42736..42745) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heapify, span: bytes(42756..42763) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: heap, span: bytes(42769..42773) }, arguments: None }] } }) }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: a, span: bytes(42776..42777) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: b, span: bytes(42779..42780) }, subpat: None })], or2_token: Or, output: Default, body: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: less_than, span: bytes(42782..42791) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(42793..42794) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(42795..42799) }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(42802..42803) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(42804..42808) }) }) })] }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sift_down, span: bytes(43322..43331) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(43337..43341) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: heap, span: bytes(43342..43346) }) }) }), Comma, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: a, span: bytes(43352..43353) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: b, span: bytes(43355..43356) }, subpat: None })], or2_token: Or, output: Default, body: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: less_than, span: bytes(43358..43367) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(43369..43370) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(43371..43375) }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(43378..43379) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: head, span: bytes(43380..43384) }) }) })] }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(43396..43400) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: result, span: bytes(43401..43407) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(43606..43610) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(12497..12500) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: io, span: bytes(12502..12504) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: stdout, span: bytes(12506..12512) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(12542..12545) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: str, span: bytes(12547..12550) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_utf8_unchecked, span: bytes(12552..12571) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: ByteStr(LitByteStr { token: b"binarystring" }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ParseError, span: bytes(84397..84407) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Numeric, span: bytes(84409..84416) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: err, span: bytes(84417..84420) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(84987..84990) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ParseError, span: bytes(84991..85001) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Other, span: bytes(85003..85008) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Str(LitStr { token: "Missing name" }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(85044..85046) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iris, span: bytes(85047..85051) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(85246..85249) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(85251..85254) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(85487..85490) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: process, span: bytes(85492..85499) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: exit, span: bytes(85501..85505) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ord, span: bytes(85612..85615) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: cmp, span: bytes(85617..85620) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(85622..85623) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: name, span: bytes(85624..85628) }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(85631..85632) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: name, span: bytes(85633..85637) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HashMap, span: bytes(85747..85754) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(85756..85759) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: repeat, span: bytes(86729..86735) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Char(LitChar { token: ' ' }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_max, span: bytes(87053..87060) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: irises, span: bytes(87062..87068) }, arguments: None }] } }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(87070..87071) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_max, span: bytes(87103..87110) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: irises, span: bytes(87112..87118) }, arguments: None }] } }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(87120..87121) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: round_to_grid, span: bytes(87368..87381) }, arguments: None }] } }), paren_token: Paren, args: [Index(ExprIndex { attrs: [], expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iris, span: bytes(87382..87386) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: data, span: bytes(87387..87391) }) }), bracket_token: Bracket, index: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(87392..87393) }, arguments: None }] } }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_x, span: bytes(87396..87401) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max_x, span: bytes(87403..87408) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: flip, span: bytes(87432..87436) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: round_to_grid, span: bytes(87437..87450) }, arguments: None }] } }), paren_token: Paren, args: [Index(ExprIndex { attrs: [], expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iris, span: bytes(87451..87455) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: data, span: bytes(87456..87460) }) }), bracket_token: Bracket, index: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(87461..87462) }, arguments: None }] } }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min_y, span: bytes(87465..87470) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: max_y, span: bytes(87472..87477) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test2_package_with_shallow_deps, span: bytes(37480..37511) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: f, span: bytes(37513..37514) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: itertools, span: bytes(37605..37614) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: assert_equal, span: bytes(37616..37628) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: it, span: bytes(37629..37631) }, arguments: None }] } }), Comma, Macro(ExprMacro { attrs: [], mac: Macro { path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: vec, span: bytes(37633..37636) }, arguments: None }] }, bang_token: Bang, delimiter: Bracket(Bracket), tokens: TokenStream [Literal { lit: 1, span: bytes(37638..37639) }, Punct { char: ',', spacing: Alone, span: bytes(37639..37640) }, Punct { char: '-', spacing: Alone, span: bytes(37641..37642) }, Literal { lit: 1, span: bytes(37642..37643) }, Punct { char: ',', spacing: Alone, span: bytes(37643..37644) }, Literal { lit: 2, span: bytes(37645..37646) }, Punct { char: ',', spacing: Alone, span: bytes(37646..37647) }, Punct { char: '-', spacing: Alone, span: bytes(37648..37649) }, Literal { lit: 2, span: bytes(37649..37650) }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: VecDeque, span: bytes(25788..25796) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(25798..25801) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(26298..26302) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(26304..26308) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: buf, span: bytes(26309..26312) }) }), bracket_token: Bracket, index: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(26313..26317) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: index, span: bytes(26318..26323) }) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(26472..26476) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(26478..26482) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: buf, span: bytes(26483..26486) }) }), bracket_token: Bracket, index: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(26487..26491) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: index, span: bytes(26492..26497) }) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(26903..26909) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(26910..26911) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(27027..27033) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(27034..27035) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(27447..27456) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(27458..27468) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(27469..27473) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(27474..27478) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(27479..27488) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(27492..27496) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: buf, span: bytes(27497..27500) }) }), dot_token: Dot, method: Ident { sym: len, span: bytes(27501..27504) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(33446..33455) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(33456..33457) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(33614..33623) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(33624..33625) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(33628..33629) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(33843..33852) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(33853..33854) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(33857..33858) }, arguments: None }] } }) }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: k, span: bytes(33861..33862) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(34141..34150) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Binary(ExprBinary { attrs: [], left: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(34151..34152) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(34155..34156) }, arguments: None }] } }) }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: k, span: bytes(34159..34160) }, arguments: None }] } }) }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(34163..34164) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(34360..34369) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(34370..34371) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(34515..34524) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(34525..34526) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(34529..34530) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(34677..34686) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(34687..34688) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(34691..34692) }, arguments: None }] } }) }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: k, span: bytes(34695..34696) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(34846..34855) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Binary(ExprBinary { attrs: [], left: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(34856..34857) }, arguments: None }] } }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(34860..34861) }, arguments: None }] } }) }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: k, span: bytes(34864..34865) }, arguments: None }] } }) }), op: Add(Add), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(34868..34869) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(21234..21238) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(21240..21244) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: filler, span: bytes(21245..21251) }) }) }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(21253..21257) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: pos, span: bytes(21258..21261) }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(21618..21627) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max, span: bytes(21629..21632) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(21633..21637) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(21638..21642) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(21643..21652) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: tail, span: bytes(21657..21661) }, arguments: None }] } }), Comma, Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(21663..21667) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: tail, span: bytes(21668..21672) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(22103..22107) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(22109..22113) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: filler, span: bytes(22114..22120) }) }) }), paren_token: Paren, args: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(22122..22126) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: min, span: bytes(22127..22130) }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(44128..44131) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(44133..44136) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(45007..45016) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(45018..45028) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(45029..45033) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(45034..45038) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(45039..45048) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(45052..45056) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: top, span: bytes(45057..45060) }) }), dot_token: Dot, method: Ident { sym: len, span: bytes(45061..45064) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(35511..35515) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(35516..35517) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(35580..35583) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: e, span: bytes(35584..35585) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(37349..37351) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: processor, span: bytes(37375..37384) }, arguments: None }] } }), paren_token: Paren, args: [Struct(ExprStruct { attrs: [], path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ProcessResults, span: bytes(37385..37399) }, arguments: None }] }, brace_token: Brace, fields: [FieldValue { attrs: [], member: Named(Ident { sym: error, span: bytes(37402..37407) }), colon_token: Some(Colon), expr: Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: error, span: bytes(37414..37419) }, arguments: None }] } }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: iter, span: bytes(37421..37425) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(37427..37431) }, arguments: None }] } }) }], dot2_token: None, rest: None })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(26154..26160) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(26161..26162) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(26481..26487) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(26489..26490) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(26583..26587) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(26588..26589) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(26906..26912) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(26914..26915) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(27008..27012) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(27013..27014) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s1, span: bytes(13907..13909) }, arguments: None }] } }), paren_token: Paren, args: [Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(13910..13911) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s2, span: bytes(13953..13955) }, arguments: None }] } }), paren_token: Paren, args: [Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(13956..13957) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }), Comma, Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(13962..13963) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s3, span: bytes(14005..14007) }, arguments: None }] } }), paren_token: Paren, args: [Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14008..14009) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }), Comma, Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14014..14015) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) }) }), Comma, Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14020..14021) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 2 }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s4, span: bytes(14063..14065) }, arguments: None }] } }), paren_token: Paren, args: [Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14066..14067) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }), Comma, Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14072..14073) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) }) }), Comma, Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14078..14079) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 2 }) }) }), Comma, Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14084..14085) }, arguments: None }] } }), bracket_token: Bracket, index: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 3 }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s1, span: bytes(14130..14132) }, arguments: None }] } }), paren_token: Paren, args: [Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14134..14135) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(14136..14137) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s2, span: bytes(14183..14185) }, arguments: None }] } }), paren_token: Paren, args: [Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14187..14188) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(14189..14190) }) }) }), Comma, Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14193..14194) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 1, span: bytes(14195..14196) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s3, span: bytes(14248..14250) }, arguments: None }] } }), paren_token: Paren, args: [Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14252..14253) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(14254..14255) }) }) }), Comma, Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14258..14259) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 1, span: bytes(14260..14261) }) }) }), Comma, Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14264..14265) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 2, span: bytes(14266..14267) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s4, span: bytes(14325..14327) }, arguments: None }] } }), paren_token: Paren, args: [Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14329..14330) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(14331..14332) }) }) }), Comma, Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14335..14336) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 1, span: bytes(14337..14338) }) }) }), Comma, Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14341..14342) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 2, span: bytes(14343..14344) }) }) }), Comma, Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: s, span: bytes(14347..14348) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 3, span: bytes(14349..14350) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Rc, span: bytes(23861..23863) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(23865..23868) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RefCell, span: bytes(23869..23876) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(23878..23881) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iterable, span: bytes(23882..23890) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(23891..23900) }, turbofish: None, paren_token: Paren, args: [] })] })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Unary(ExprUnary { attrs: [], op: Deref(Star), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(21711..21715) }, arguments: None }] } }) }) }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: arg, span: bytes(21717..21720) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MultiProduct, span: bytes(13583..13595) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iters, span: bytes(13596..13601) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: map, span: bytes(13602..13605) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: i, span: bytes(13607..13608) }, subpat: None })], or2_token: Or, output: Default, body: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MultiProductIter, span: bytes(13610..13626) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(13628..13631) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(13632..13633) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(13634..13643) }, turbofish: None, paren_token: Paren, args: [] })] }) })] }), dot_token: Dot, method: Ident { sym: collect, span: bytes(13648..13655) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MultiProduct, span: bytes(15062..15074) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: iterate_last, span: bytes(15076..15088) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: rest, span: bytes(15089..15093) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: state, span: bytes(15095..15100) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MultiProduct, span: bytes(17018..17030) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: iterate_last, span: bytes(17032..17044) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(17063..17067) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(17068..17069) }) }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MultiProductIterState, span: bytes(17083..17104) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: StartOfIter, span: bytes(17106..17117) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(17142..17146) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(17147..17151) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: curr_iterator, span: bytes(17152..17165) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(17953..17957) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(18049..18053) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(18095..18104) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: mul, span: bytes(18106..18109) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(18110..18113) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: multi_iter, span: bytes(18115..18125) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(18126..18130) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(18131..18140) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(18215..18219) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(18421..18430) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add, span: bytes(18432..18435) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(18436..18445) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: mul, span: bytes(18447..18450) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(18451..18454) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: total_size, span: bytes(18456..18466) }, arguments: None }] } })] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cur_size, span: bytes(18469..18477) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(18799..18803) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lasts, span: bytes(18804..18809) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(26496..26499) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(26501..26504) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(27005..27009) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(27010..27013) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(27048..27052) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(27053..27056) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(27150..27154) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(27155..27158) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(27942..27945) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(27947..27950) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(28701..28705) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(28706..28709) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(28755..28759) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(28760..28763) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(28924..28928) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(28929..28932) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(28951..28955) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(28956..28959) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(29838..29842) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(29843..29846) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(29880..29884) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(29885..29888) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RefCell, span: bytes(31373..31380) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(31382..31385) }, arguments: None }] } }), paren_token: Paren, args: [Struct(ExprStruct { attrs: [], path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: GroupInner, span: bytes(31386..31396) }, arguments: None }] }, brace_token: Brace, fields: [FieldValue { attrs: [], member: Named(Ident { sym: key, span: bytes(31411..31414) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(31416..31417) }, arguments: None }] } }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: iter, span: bytes(31431..31435) }), colon_token: Some(Colon), expr: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(31437..31441) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(31442..31451) }, turbofish: None, paren_token: Paren, args: [] }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: current_key, span: bytes(31467..31478) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(31480..31484) }, arguments: None }] } }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: current_elt, span: bytes(31498..31509) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(31511..31515) }, arguments: None }] } }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: done, span: bytes(31529..31533) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Bool(LitBool { value: false }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: top_group, span: bytes(31554..31563) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: oldest_buffered_group, span: bytes(31580..31601) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: bottom_group, span: bytes(31618..31630) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: buffer, span: bytes(31647..31653) }), colon_token: Some(Colon), expr: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(31655..31658) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(31660..31663) }, arguments: None }] } }), paren_token: Paren, args: [] }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: dropped_group, span: bytes(31679..31692) }), colon_token: Some(Colon), expr: Unary(ExprUnary { attrs: [], op: Not(Bang), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }) }, Comma], dot2_token: None, rest: None })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Cell, span: bytes(31725..31729) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(31731..31734) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(33550..33554) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(33555..33558) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: RefCell, span: bytes(34584..34591) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(34593..34596) }, arguments: None }] } }), paren_token: Paren, args: [Struct(ExprStruct { attrs: [], path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: GroupInner, span: bytes(34597..34607) }, arguments: None }] }, brace_token: Brace, fields: [FieldValue { attrs: [], member: Named(Ident { sym: key, span: bytes(34622..34625) }), colon_token: Some(Colon), expr: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ChunkIndex, span: bytes(34627..34637) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(34639..34642) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size, span: bytes(34643..34647) }, arguments: None }] } })] }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: iter, span: bytes(34662..34666) }), colon_token: Some(Colon), expr: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(34668..34672) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(34673..34682) }, turbofish: None, paren_token: Paren, args: [] }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: current_key, span: bytes(34698..34709) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(34711..34715) }, arguments: None }] } }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: current_elt, span: bytes(34729..34740) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(34742..34746) }, arguments: None }] } }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: done, span: bytes(34760..34764) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Bool(LitBool { value: false }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: top_group, span: bytes(34785..34794) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: oldest_buffered_group, span: bytes(34811..34832) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: bottom_group, span: bytes(34849..34861) }), colon_token: Some(Colon), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: buffer, span: bytes(34878..34884) }), colon_token: Some(Colon), expr: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(34886..34889) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(34891..34894) }, arguments: None }] } }), paren_token: Paren, args: [] }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: dropped_group, span: bytes(34910..34923) }), colon_token: Some(Colon), expr: Unary(ExprUnary { attrs: [], op: Not(Bang), expr: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) }) }) }, Comma], dot2_token: None, rest: None })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Cell, span: bytes(34956..34960) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(34962..34965) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(37348..37352) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(37353..37356) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(22757..22761) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(22762..22763) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(23252..23256) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(23257..23258) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(23724..23728) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(23729..23734) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(23769..23774) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(23775..23780) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(24419..24423) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(24424..24429) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(24468..24473) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(24474..24479) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(24904..24909) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(24910..24911) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(24938..24942) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(24943..24944) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(25505..25509) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(25510..25511) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(25512..25513) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(25541..25546) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(25547..25548) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(26114..26118) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(26119..26120) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(26147..26152) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(26153..26154) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(26155..26156) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(26934..26935) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(26936..26937) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(26964..26965) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(26966..26967) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(27786..27787) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ctx, span: bytes(27788..27791) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(27793..27794) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(27821..27822) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ctx, span: bytes(27823..27826) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(27828..27829) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(28408..28409) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(28410..28411) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(28438..28443) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(28444..28445) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(29010..29014) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(29015..29016) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(29043..29044) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(29045..29046) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(29589..29593) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(29594..29595) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(29596..29605) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(29634..29639) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(29640..29641) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(29642..29651) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: L, span: bytes(30948..30949) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: default, span: bytes(30951..30958) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(31552..31553) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(31554..31555) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: R, span: bytes(32823..32824) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: default, span: bytes(32826..32833) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(33431..33432) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(33433..33434) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(34080..34084) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(34085..34086) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(34123..34128) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(34129..34130) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(34743..34747) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(34748..34749) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(34786..34791) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(34792..34793) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Left, span: bytes(35448..35452) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: e, span: bytes(35453..35454) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Right, span: bytes(35478..35483) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: o, span: bytes(35484..35485) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(35712..35715) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(35716..35717) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(35744..35746) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(35747..35748) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: check_array_ref, span: bytes(44269..44284) }, arguments: AngleBracketed(AngleBracketedGenericArguments { colon2_token: Some(Colon2), lt_token: Lt, args: [Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Either, span: bytes(44287..44293) }, arguments: AngleBracketed(AngleBracketedGenericArguments { colon2_token: None, lt_token: Lt, args: [Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T1, span: bytes(44294..44296) }, arguments: None }] } })), Comma, Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T2, span: bytes(44298..44300) }, arguments: None }] } }))], gt_token: Gt }) }] } })), Comma, Type(Infer(TypeInfer { underscore_token: Underscore }))], gt_token: Gt }) }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: check_array_mut, span: bytes(44398..44413) }, arguments: AngleBracketed(AngleBracketedGenericArguments { colon2_token: Some(Colon2), lt_token: Lt, args: [Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Either, span: bytes(44416..44422) }, arguments: AngleBracketed(AngleBracketedGenericArguments { colon2_token: None, lt_token: Lt, args: [Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T1, span: bytes(44423..44425) }, arguments: None }] } })), Comma, Type(Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T2, span: bytes(44427..44429) }, arguments: None }] } }))], gt_token: Gt }) }] } })), Comma, Type(Infer(TypeInfer { underscore_token: Underscore }))], gt_token: Gt }) }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: repeat, span: bytes(15843..15849) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1i32 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(15921..15925) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(15927..15936) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(15937..15940) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: repeat, span: bytes(16026..16032) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1i32 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(16110..16114) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(16116..16125) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(16126..16129) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(16263..16272) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(16273..16275) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(16291..16300) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(16301..16303) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(16380..16384) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(16386..16395) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(16396..16397) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(16412..16416) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(16418..16427) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(16428..16429) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(16580..16589) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(16590..16592) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(16608..16617) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(16618..16620) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(16896..16905) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(16906..16908) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(16924..16933) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(16934..16936) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(17228..17237) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(17238..17240) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(17256..17265) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(17266..17268) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(17284..17293) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: zs, span: bytes(17294..17296) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(17388..17392) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(17394..17403) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(17404..17405) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(17420..17424) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(17426..17435) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(17436..17437) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(17452..17456) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(17458..17467) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: z, span: bytes(17468..17469) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(17638..17647) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(17649..17651) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(17671..17680) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(17682..17684) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: itertools, span: bytes(17711..17720) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: multizip, span: bytes(17722..17730) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(17732..17734) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(17736..17738) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(17755..17759) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(17761..17770) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(17771..17772) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(17787..17791) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(17793..17802) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(17803..17804) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(17942..17951) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(17952..17954) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(17970..17979) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(17980..17982) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ZipSlices, span: bytes(18026..18035) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(18037..18040) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(18042..18044) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(18047..18049) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(18065..18069) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(18071..18080) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(18081..18082) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(18097..18101) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(18103..18112) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(18113..18114) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(18256..18265) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(18266..18268) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(18288..18297) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(18298..18300) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ZipSlices, span: bytes(18348..18357) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_slices, span: bytes(18359..18370) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(18372..18374) }, arguments: None }] } }), bracket_token: Bracket, index: Range(ExprRange { attrs: [], from: None, limits: HalfOpen(Dot2), to: None }) }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(18385..18387) }, arguments: None }] } }), bracket_token: Bracket, index: Range(ExprRange { attrs: [], from: None, limits: HalfOpen(Dot2), to: None }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(18407..18411) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(18413..18422) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(18423..18424) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(18439..18443) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(18445..18454) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(18455..18456) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(18605..18614) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(18615..18617) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(18633..18642) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(18643..18645) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ZipSlices, span: bytes(18715..18724) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(18726..18729) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(18731..18733) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(18736..18738) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(18928..18937) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(18938..18940) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(18956..18965) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(18966..18968) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ZipSlices, span: bytes(19036..19045) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(19047..19050) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(19052..19054) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(19057..19059) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(19248..19257) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(19258..19260) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(19276..19285) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(19286..19288) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(19405..19408) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(19410..19413) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(19414..19416) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(19417..19420) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(19424..19426) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(19427..19430) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(19586..19590) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(19592..19601) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(19602..19603) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(19618..19622) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(19624..19633) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(19634..19635) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(19795..19804) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(19805..19807) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(19823..19832) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(19833..19835) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(19952..19955) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(19957..19960) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(19961..19963) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(19964..19967) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(19971..19973) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(19974..19977) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(20299..20308) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(20309..20311) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(20327..20336) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(20337..20339) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(20456..20459) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(20461..20464) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(20465..20467) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(20468..20471) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(20475..20477) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(20478..20481) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(20810..20819) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(20820..20822) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(20838..20847) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(20848..20850) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(20967..20970) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(20972..20975) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(20976..20978) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(20979..20982) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(20986..20988) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(20989..20992) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(22034..22043) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(22044..22046) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(22062..22071) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(22072..22074) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(22112..22115) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(22117..22120) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(22121..22123) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(22124..22127) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(22131..22133) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(22134..22137) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(22285..22289) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(22291..22300) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(22301..22302) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(22317..22321) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(22323..22332) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(22333..22334) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(22510..22519) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(22520..22522) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(22538..22547) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(22548..22550) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(22588..22591) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(22593..22596) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(22597..22599) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(22600..22603) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(22607..22609) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(22610..22613) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(22984..22993) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(22994..22996) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(23012..23021) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(23022..23024) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(23062..23065) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(23067..23070) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(23071..23073) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(23074..23077) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(23081..23083) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(23084..23087) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(23477..23486) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(23487..23489) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(23505..23514) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(23515..23517) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(23533..23542) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: zs, span: bytes(23543..23545) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(23583..23586) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(23588..23591) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xs, span: bytes(23592..23594) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(23595..23598) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(23602..23605) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(23607..23610) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ys, span: bytes(23611..23613) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(23614..23617) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: zs, span: bytes(23621..23623) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(23624..23627) }, turbofish: None, paren_token: Paren, args: [] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(23818..23822) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(23824..23833) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(23834..23835) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(23850..23854) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(23856..23865) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(23866..23867) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(23882..23886) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(23888..23897) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: z, span: bytes(23898..23899) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(24126..24130) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(24132..24141) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(24142..24146) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(24279..24283) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(24285..24294) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(24295..24298) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(24524..24528) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(24530..24539) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(24540..24544) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(24677..24681) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(24683..24692) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(24693..24696) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(24829..24833) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(24835..24844) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(24845..24849) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(24865..24869) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(24871..24880) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 10 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(24989..24993) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(24995..25004) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(25005..25008) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(25142..25146) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(25148..25157) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(25158..25162) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(25178..25182) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(25184..25193) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 10 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(25310..25314) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(25316..25325) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(25326..25329) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(25479..25483) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(25485..25494) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(25496..25500) }, arguments: None }] } }), bracket_token: Bracket, index: Range(ExprRange { attrs: [], from: Some(Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) })), limits: HalfOpen(Dot2), to: None }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(25523..25527) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(25529..25538) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Index(ExprIndex { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data, span: bytes(25540..25544) }, arguments: None }] } }), bracket_token: Bracket, index: Range(ExprRange { attrs: [], from: None, limits: HalfOpen(Dot2), to: Some(Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: l, span: bytes(25547..25548) }, arguments: None }] } }), op: Sub(Sub), right: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) }) })) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: itertools, span: bytes(25580..25589) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: equal, span: bytes(25591..25596) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: alpha, span: bytes(25597..25602) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: beta, span: bytes(25604..25608) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(26053..26057) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(26059..26068) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data1, span: bytes(26069..26074) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(26093..26097) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(26099..26108) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data2, span: bytes(26109..26114) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(26618..26622) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(26624..26633) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data1, span: bytes(26634..26639) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(26658..26662) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(26664..26673) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data2, span: bytes(26674..26679) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(27201..27205) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(27207..27216) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data1, span: bytes(27217..27222) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(27241..27245) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(27247..27256) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data2, span: bytes(27257..27262) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(27786..27790) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(27792..27801) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data1, span: bytes(27802..27807) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: test, span: bytes(27826..27830) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: black_box, span: bytes(27832..27841) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: data2, span: bytes(27842..27847) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: rng, span: bytes(28254..28257) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: state, span: bytes(28263..28268) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(28299..28302) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(28304..28307) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: rng, span: bytes(28400..28403) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: state, span: bytes(28409..28414) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(28447..28450) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(28452..28455) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: rest, span: bytes(28456..28460) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(28461..28464) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Cast(ExprCast { attrs: [], expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: chunk_len, span: bytes(28468..28477) }, arguments: None }] } }), as_token: As, ty: Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(28481..28486) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: Some(QSelf { lt_token: Lt, ty: Infer(TypeInfer { underscore_token: Underscore }), position: 0, as_token: None, gt_token: Gt }), path: Path { leading_colon: Some(Colon2), segments: [PathSegment { ident: Ident { sym: default, span: bytes(28960..28967) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: fast_integer_sum, span: bytes(29088..29104) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cloned, span: bytes(29105..29111) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(29112..29113) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: iter, span: bytes(29114..29118) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: step, span: bytes(29121..29125) }, turbofish: None, paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 2 }) })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: fast_integer_sum, span: bytes(29242..29258) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cloned, span: bytes(29259..29265) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(29266..29267) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: iter, span: bytes(29268..29272) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: step, span: bytes(29275..29279) }, turbofish: None, paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 10 }) })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(29359..29368) }, arguments: None }] } }), paren_token: Paren, args: [Range(ExprRange { attrs: [], from: Some(Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })), limits: HalfOpen(Dot2), to: Some(Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1024 }) })) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: fast_integer_sum, span: bytes(29403..29419) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(29420..29421) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(29422..29427) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: step, span: bytes(29430..29434) }, turbofish: None, paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 2 }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: black_box, span: bytes(29513..29522) }, arguments: None }] } }), paren_token: Paren, args: [Range(ExprRange { attrs: [], from: Some(Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })), limits: HalfOpen(Dot2), to: Some(Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1024 }) })) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: fast_integer_sum, span: bytes(29557..29573) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(29574..29575) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(29576..29581) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: step, span: bytes(29584..29588) }, turbofish: None, paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 10 }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(14846..14855) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add, span: bytes(14857..14860) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(14861..14865) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: a, span: bytes(14866..14867) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(14868..14877) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(14881..14885) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: b, span: bytes(14886..14887) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(14888..14897) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(16843..16852) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: mul_scalar, span: bytes(16854..16864) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(16865..16874) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: min, span: bytes(16876..16879) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: curr_hint, span: bytes(16880..16889) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: next_hint, span: bytes(16891..16900) }, arguments: None }] } })] }), Comma, Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 2 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(18589..18593) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(18594..18595) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(19010..19019) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(19021..19031) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(19032..19036) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(19037..19041) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(19042..19051) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Cast(ExprCast { attrs: [], expr: MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(19055..19059) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: top, span: bytes(19060..19063) }) }), dot_token: Dot, method: Ident { sym: is_some, span: bytes(19064..19071) }, turbofish: None, paren_token: Paren, args: [] }), as_token: As, ty: Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(19077..19082) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(19244..19245) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(19246..19249) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(19546..19547) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accum, span: bytes(19548..19553) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(19555..19558) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(21155..21159) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(21161..21162) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(21163..21168) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt_b, span: bytes(21172..21177) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(21510..21519) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add, span: bytes(21521..21524) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(21538..21547) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: mul, span: bytes(21549..21552) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(21553..21557) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: a, span: bytes(21558..21559) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(21560..21569) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(21573..21577) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: b_orig, span: bytes(21578..21584) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(21585..21594) }, turbofish: None, paren_token: Paren, args: [] })] }), Comma, Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b_min, span: bytes(21612..21617) }, arguments: None }] } }), op: Mul(Star), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: has_cur, span: bytes(21620..21627) }, arguments: None }] } }) }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b_max, span: bytes(21629..21634) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: map, span: bytes(21635..21638) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: Some(Move), or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: x, span: bytes(21645..21646) }, subpat: None })], or2_token: Or, output: Default, body: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(21648..21649) }, arguments: None }] } }), op: Mul(Star), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: has_cur, span: bytes(21652..21659) }, arguments: None }] } }) }) })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(22049..22050) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(22051..22054) }, arguments: None }] } }), Comma, Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(22057..22058) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(22059..22064) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(22068..22071) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(23313..23317) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(23318..23319) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(23326..23330) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(23331..23335) }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: div, span: bytes(24850..24853) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: low, span: bytes(24854..24857) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: merge_by_new, span: bytes(26104..26116) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(26117..26118) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: j, span: bytes(26120..26121) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: MergeLte, span: bytes(26123..26131) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(26985..26989) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(26990..26991) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(26993..26994) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(28131..28135) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Bool(LitBool { value: true }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(28256..28260) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Bool(LitBool { value: false }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(28623..28632) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add, span: bytes(28634..28637) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(28638..28642) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: a, span: bytes(28643..28644) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(28645..28654) }, turbofish: None, paren_token: Paren, args: [] }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(28658..28662) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: b, span: bytes(28663..28664) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(28665..28674) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(29207..29208) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: last, span: bytes(29209..29213) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: next, span: bytes(29215..29219) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(29341..29345) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: next_, span: bytes(29346..29351) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(29381..29385) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: last_, span: bytes(29386..29391) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(29445..29449) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: last, span: bytes(29450..29454) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size_hint, span: bytes(29539..29548) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: add_scalar, span: bytes(29550..29560) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(29561..29565) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(29566..29570) }) }), dot_token: Dot, method: Ident { sym: size_hint, span: bytes(29571..29580) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Cast(ExprCast { attrs: [], expr: MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(29630..29634) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: last, span: bytes(29635..29639) }) }), dot_token: Dot, method: Ident { sym: is_some, span: bytes(29640..29647) }, turbofish: None, paren_token: Paren, args: [] }), as_token: As, ty: Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(29653..29658) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(31813..31817) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(31818..31819) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(31821..31822) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: dedup_by, span: bytes(32574..32582) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(32583..32587) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: DedupEq, span: bytes(32589..32596) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(33099..33101) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(33102..33103) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(33114..33117) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(33119..33120) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(33122..33123) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(33632..33633) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(33634..33637) }, arguments: None }] } }), Comma, Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: replace, span: bytes(33639..33646) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: last, span: bytes(33652..33656) }, arguments: None }] } }) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(33658..33661) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(33710..33711) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accum, span: bytes(33712..33717) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: last, span: bytes(33719..33723) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(34847..34851) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(34852..34853) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(34856..34859) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(34883..34887) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(34888..34891) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(36857..36858) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Combination, span: bytes(36860..36871) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from, span: bytes(36873..36877) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(36878..36882) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: fold_f, span: bytes(40606..40612) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(40613..40616) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(40618..40619) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into, span: bytes(40620..40624) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: fold_f, span: bytes(42080..42086) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(42087..42090) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(42092..42093) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: map, span: bytes(42094..42097) }, turbofish: None, paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(42103..42104) }, arguments: None }] } }) })] })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(43146..43150) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(43151..43152) }) }) }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(43154..43155) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(43182..43186) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: i, span: bytes(43187..43188) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(43597..43601) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(43602..43603) }) }) }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(43605..43606) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(43633..43637) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(43638..43642) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: count, span: bytes(43643..43648) }) }), op: Add(Add), right: MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(43651..43655) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: iter, span: bytes(43656..43660) }) }), dot_token: Dot, method: Ident { sym: len, span: bytes(43661..43664) }, turbofish: None, paren_token: Paren, args: [] }) })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(44415..44419) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(44420..44421) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(44428..44429) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(44444..44448) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(44449..44450) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(44777..44778) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(44784..44785) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(44788..44789) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(44790..44793) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(44795..44796) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(45019..45020) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(45026..45027) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Paren(ExprParen { attrs: [], paren_token: Paren, expr: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(45394..45398) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: f, span: bytes(45399..45400) }) }) }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(45407..45408) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(45423..45427) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(45428..45429) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(39317..39322) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(39324..39333) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(39334..39335) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(39361..39366) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(39368..39377) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(39378..39379) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(39491..39496) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max_value, span: bytes(39498..39507) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(39552..39557) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max_value, span: bytes(39559..39568) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Box, span: bytes(39890..39893) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(39895..39898) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: underestimate_value, span: bytes(39912..39931) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: shrink, span: bytes(39932..39938) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: flat_map, span: bytes(39941..39949) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: Some(Move), or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: ue_value, span: bytes(39956..39964) }, subpat: None })], or2_token: Or, output: Default, body: MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: overestimate_value, span: bytes(39982..40000) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: shrink, span: bytes(40001..40007) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: map, span: bytes(40010..40013) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: Some(Move), or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: oe_value, span: bytes(40020..40028) }, subpat: None })], or2_token: Or, output: Default, body: Struct(ExprStruct { attrs: [], path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Inexact, span: bytes(40050..40057) }, arguments: None }] }, brace_token: Brace, fields: [FieldValue { attrs: [], member: Named(Ident { sym: underestimate, span: bytes(40084..40097) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ue_value, span: bytes(40099..40107) }, arguments: None }] } }) }, Comma, FieldValue { attrs: [], member: Named(Ident { sym: overestimate, span: bytes(40133..40145) }), colon_token: Some(Colon), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: oe_value, span: bytes(40147..40155) }, arguments: None }] } }) }, Comma], dot2_token: None, rest: None }) })] }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(41343..41347) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Default, span: bytes(41348..41355) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: default, span: bytes(41357..41364) }, arguments: None }] } }), paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Iter, span: bytes(42105..42109) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(42111..42114) }, arguments: None }] } }), paren_token: Paren, args: [Range(ExprRange { attrs: [], from: Some(Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(42115..42116) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(42118..42127) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(42128..42129) }, arguments: None }] } })] })), limits: HalfOpen(Dot2), to: Some(Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(42132..42133) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(42135..42144) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(42145..42146) }, arguments: None }] } })] })) }), Comma, Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: HK, span: bytes(42149..42151) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(42153..42162) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(42163..42164) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Box, span: bytes(42323..42326) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(42328..42331) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(42345..42346) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: start, span: bytes(42347..42352) }) }), dot_token: Dot, method: Ident { sym: shrink, span: bytes(42353..42359) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: flat_map, span: bytes(42362..42370) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: Some(Move), or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: a, span: bytes(42377..42378) }, subpat: None })], or2_token: Or, output: Default, body: MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: r, span: bytes(42396..42397) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: end, span: bytes(42398..42401) }) }), dot_token: Dot, method: Ident { sym: shrink, span: bytes(42402..42408) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: map, span: bytes(42411..42414) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: Some(Move), or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: b, span: bytes(42421..42422) }, subpat: None })], or2_token: Or, output: Default, body: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Iter, span: bytes(42444..42448) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(42450..42453) }, arguments: None }] } }), paren_token: Paren, args: [Range(ExprRange { attrs: [], from: Some(MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(42454..42455) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: clone, span: bytes(42456..42461) }, turbofish: None, paren_token: Paren, args: [] })), limits: HalfOpen(Dot2), to: Some(Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(42465..42466) }, arguments: None }] } })) }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: hint_kind, span: bytes(42468..42477) }, arguments: None }] } })] }) })] }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Iter, span: bytes(43066..43070) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(43072..43075) }, arguments: None }] } }), paren_token: Paren, args: [Range(ExprRange { attrs: [], from: Some(Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(43076..43080) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: range_start, span: bytes(43081..43092) }) })), limits: HalfOpen(Dot2), to: Some(Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(43094..43098) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: range_end, span: bytes(43099..43108) }) })) }), Comma, Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(43110..43114) }, arguments: None }] } }), dot_token: Dot, member: Named(Ident { sym: hint_kind, span: bytes(43115..43124) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(43253..43257) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: iter, span: bytes(43258..43262) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: qc, span: bytes(43595..43597) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Arbitrary, span: bytes(43599..43608) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(43610..43619) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(43620..43621) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: qc, span: bytes(43944..43946) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Arbitrary, span: bytes(43948..43957) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: arbitrary, span: bytes(43959..43968) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(43969..43970) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(44379..44382) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(44384..44397) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: initial_hint, span: bytes(44398..44410) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(44411..44412) }) }), op: Add(Add), right: Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 1 }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(45096..45100) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: low, span: bytes(45101..45104) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(45302..45306) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: low, span: bytes(45307..45310) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(45400..45404) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(45603..45607) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: low, span: bytes(45608..45611) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(45809..45813) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: low, span: bytes(45814..45817) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(45907..45911) }, arguments: None }] } }), paren_token: Paren, args: [Lit(ExprLit { attrs: [], lit: Int(LitInt { token: 0 }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: Some(QSelf { lt_token: Lt, ty: Tuple(TypeTuple { paren_token: Paren, elems: [Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: u32, span: bytes(65712..65715) }, arguments: None }] } }), Comma, Path(TypePath { qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: u32, span: bytes(65717..65720) }, arguments: None }] } })] }), position: 0, as_token: None, gt_token: Gt }), path: Path { leading_colon: Some(Colon2), segments: [PathSegment { ident: Ident { sym: arbitrary, span: bytes(65724..65733) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: g, span: bytes(65734..65735) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Val, span: bytes(65746..65749) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(65750..65751) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(65753..65754) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Box, span: bytes(65823..65826) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(65828..65831) }, arguments: None }] } }), paren_token: Paren, args: [MethodCall(ExprMethodCall { attrs: [], receiver: MethodCall(ExprMethodCall { attrs: [], receiver: Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(65833..65837) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 0, span: bytes(65838..65839) }) }), Comma, Field(ExprField { attrs: [], base: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(65841..65845) }, arguments: None }] } }), dot_token: Dot, member: Unnamed(Index { index: 1, span: bytes(65846..65847) }) })] }), dot_token: Dot, method: Ident { sym: shrink, span: bytes(65849..65855) }, turbofish: None, paren_token: Paren, args: [] }), dot_token: Dot, method: Ident { sym: map, span: bytes(65858..65861) }, turbofish: None, paren_token: Paren, args: [Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Tuple(PatTuple { attrs: [], paren_token: Paren, elems: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: x, span: bytes(65864..65865) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: y, span: bytes(65867..65868) }, subpat: None })] })], or2_token: Or, output: Default, body: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Val, span: bytes(65871..65874) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(65875..65876) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(65878..65879) }, arguments: None }] } })] }) })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: interleave, span: bytes(97758..97768) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(97769..97773) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(97775..97780) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(98308..98316) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: interleave_shortest, span: bytes(98318..98337) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(98338..98342) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(98344..98349) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(98350..98359) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: intersperse, span: bytes(98869..98880) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: intersperse, span: bytes(98882..98893) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(98894..98898) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: element, span: bytes(98900..98907) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: zip_longest, span: bytes(100125..100136) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: zip_longest, span: bytes(100138..100149) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(100150..100154) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(100156..100161) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(100162..100171) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: zip_eq, span: bytes(100564..100570) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(100571..100575) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(100577..100582) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(101493..101501) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: batching, span: bytes(101503..101511) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(101512..101516) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(101518..101519) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: groupbylazy, span: bytes(103155..103166) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(103168..103171) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(103172..103176) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(103178..103181) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: groupbylazy, span: bytes(104394..104405) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new_chunks, span: bytes(104407..104417) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(104418..104422) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: size, span: bytes(104424..104428) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: tuple_impl, span: bytes(105829..105839) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: tuple_windows, span: bytes(105841..105854) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(105855..105859) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: tuple_impl, span: bytes(107108..107118) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: tuples, span: bytes(107120..107126) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(107127..107131) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: tee, span: bytes(107887..107890) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(107892..107895) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(107896..107900) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(108585..108593) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: step, span: bytes(108595..108599) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(108600..108604) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: n, span: bytes(108606..108607) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(108936..108944) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: map_into, span: bytes(108946..108954) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(108955..108959) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(109547..109555) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: map_results, span: bytes(109557..109568) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(109569..109573) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(109575..109576) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: merge, span: bytes(110238..110243) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(110244..110248) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(110250..110255) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(111064..111072) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: merge_by_new, span: bytes(111074..111086) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(111087..111091) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(111093..111098) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(111099..111108) }, turbofish: None, paren_token: Paren, args: [] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: is_first, span: bytes(111112..111120) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: merge_join_by, span: bytes(112661..112674) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(112675..112679) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(112681..112686) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp_fn, span: bytes(112688..112694) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: kmerge, span: bytes(113490..113496) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(113497..113501) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: kmerge_by, span: bytes(114596..114605) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(114606..114610) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(114612..114617) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(115255..115263) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: cartesian_product, span: bytes(115265..115282) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(115283..115287) }, arguments: None }] } }), Comma, MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: other, span: bytes(115289..115294) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: into_iter, span: bytes(115295..115304) }, turbofish: None, paren_token: Paren, args: [] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(116817..116825) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: multi_cartesian_product, span: bytes(116827..116850) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(116851..116855) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(118242..118250) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: coalesce, span: bytes(118252..118260) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(118261..118265) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(118267..118268) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(118865..118873) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: dedup, span: bytes(118875..118880) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(118881..118885) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(119659..119667) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: dedup_by, span: bytes(119669..119677) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(119678..119682) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: cmp, span: bytes(119684..119687) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: unique_impl, span: bytes(120372..120383) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: unique, span: bytes(120385..120391) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(120392..120396) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: unique_impl, span: bytes(121183..121194) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: unique_by, span: bytes(121196..121205) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(121206..121210) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(121212..121213) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: peeking_take_while, span: bytes(121940..121958) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: peeking_take_while, span: bytes(121960..121978) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(121979..121983) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(121985..121991) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(122881..122889) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: take_while_ref, span: bytes(122891..122905) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(122906..122910) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: accept, span: bytes(122912..122918) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(123519..123527) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: while_some, span: bytes(123529..123539) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(123540..123544) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(125041..125049) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: tuple_combinations, span: bytes(125051..125069) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(125070..125074) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: combinations, span: bytes(126215..126227) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: combinations, span: bytes(126229..126241) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(126242..126246) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: n, span: bytes(126248..126249) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: pad_tail, span: bytes(127076..127084) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: pad_using, span: bytes(127086..127095) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(127096..127100) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: min, span: bytes(127102..127105) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(127107..127108) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: with_position, span: bytes(127950..127963) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_position, span: bytes(127965..127978) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(127979..127983) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(128699..128707) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: positions, span: bytes(128709..128718) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(128719..128723) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: predicate, span: bytes(128725..128734) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: adaptors, span: bytes(129250..129258) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: update, span: bytes(129260..129266) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(129267..129271) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: updater, span: bytes(129273..129280) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: T, span: bytes(129900..129901) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: collect_from_iter_no_buf, span: bytes(129903..129927) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(129928..129932) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: pred, span: bytes(131391..131395) }, arguments: None }] } }), paren_token: Paren, args: [Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: None, expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(131397..131400) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(131427..131431) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: index, span: bytes(131433..131438) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: elt, span: bytes(131440..131443) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: concat, span: bytes(135057..135063) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(135064..135068) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: String, span: bytes(136730..136736) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(136738..136741) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: String, span: bytes(136921..136927) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: with_capacity, span: bytes(136929..136942) }, arguments: None }] } }), paren_token: Paren, args: [Binary(ExprBinary { attrs: [], left: MethodCall(ExprMethodCall { attrs: [], receiver: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sep, span: bytes(136943..136946) }, arguments: None }] } }), dot_token: Dot, method: Ident { sym: len, span: bytes(136947..136950) }, turbofish: None, paren_token: Paren, args: [] }), op: Mul(Star), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: lower, span: bytes(136955..136960) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: format, span: bytes(137808..137814) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new_format_default, span: bytes(137816..137834) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(137835..137839) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sep, span: bytes(137841..137844) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: format, span: bytes(139411..139417) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new_format, span: bytes(139419..139429) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(139430..139434) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: sep, span: bytes(139436..139439) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: format, span: bytes(139441..139447) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(141194..141195) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: start, span: bytes(141196..141201) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(141203..141204) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(141240..141243) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: u, span: bytes(141244..141245) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(141280..141282) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: start, span: bytes(141283..141288) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(142356..142357) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: start, span: bytes(142358..142363) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(142365..142366) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(142438..142442) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: start, span: bytes(142443..142448) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(145532..145535) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(145536..145540) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(145644..145647) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(145648..145652) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(145653..145654) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(145672..145674) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(145675..145676) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: a, span: bytes(145677..145678) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: b, span: bytes(145680..145681) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner0, span: bytes(146211..146217) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: it, span: bytes(146218..146220) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(146222..146223) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(146278..146283) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: height, span: bytes(146284..146290) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: it, span: bytes(146292..146294) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(146296..146297) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(146384..146385) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(146386..146387) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(146389..146390) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(146738..146741) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(146742..146746) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(146747..146748) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(146795..146798) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(146799..146803) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(146804..146805) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(146806..146807) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(146809..146810) }, arguments: None }] } })] })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(146859..146861) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(146862..146863) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: inner, span: bytes(146890..146895) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: usize, span: bytes(146896..146901) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: max_value, span: bytes(146903..146912) }, arguments: None }] } }), paren_token: Paren, args: [] }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(146921..146925) }, arguments: None }] } }) }), Comma, Reference(ExprReference { attrs: [], and_token: And, raw: Reserved, mutability: Some(Mut), expr: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(146932..146933) }, arguments: None }] } }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: f, span: bytes(148636..148637) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(148638..148641) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: item, span: bytes(148643..148647) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: FoldWhile, span: bytes(148794..148803) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Continue, span: bytes(148805..148813) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: acc, span: bytes(148814..148817) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(149742..149745) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_iter, span: bytes(149747..149756) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(149757..149761) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(150917..150920) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_iter, span: bytes(150922..150931) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(150932..150936) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Vec, span: bytes(152094..152097) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: from_iter, span: bytes(152099..152108) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(152109..152113) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: A, span: bytes(153124..153125) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: default, span: bytes(153127..153134) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: B, span: bytes(153162..153163) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: default, span: bytes(153165..153172) }, arguments: None }] } }), paren_token: Paren, args: [] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: predicate, span: bytes(153221..153230) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: val, span: bytes(153231..153234) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(153285..153289) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(153290..153291) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(153344..153348) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: v, span: bytes(153349..153350) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: group_map, span: bytes(154146..154155) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: into_group_map, span: bytes(154157..154171) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(154172..154176) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: minmax, span: bytes(155586..155592) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: minmax_impl, span: bytes(155594..155605) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(155606..155610) }, arguments: None }] } }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Wild(PatWild { attrs: [], underscore_token: Underscore })], or2_token: Or, output: Default, body: Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [] }) }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: x, span: bytes(155621..155622) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: y, span: bytes(155624..155625) }, subpat: None }), Comma, Wild(PatWild { attrs: [], underscore_token: Underscore }), Comma, Wild(PatWild { attrs: [], underscore_token: Underscore })], or2_token: Or, output: Default, body: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(155633..155634) }, arguments: None }] } }), op: Lt(Lt), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(155637..155638) }, arguments: None }] } }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: minmax, span: bytes(156328..156334) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: minmax_impl, span: bytes(156336..156347) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(156348..156352) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: key, span: bytes(156354..156357) }, arguments: None }] } }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Wild(PatWild { attrs: [], underscore_token: Underscore }), Comma, Wild(PatWild { attrs: [], underscore_token: Underscore }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: xk, span: bytes(156366..156368) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: yk, span: bytes(156370..156372) }, subpat: None })], or2_token: Or, output: Default, body: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: xk, span: bytes(156374..156376) }, arguments: None }] } }), op: Lt(Lt), right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: yk, span: bytes(156379..156381) }, arguments: None }] } }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: minmax, span: bytes(156985..156991) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: minmax_impl, span: bytes(156993..157004) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(157018..157022) }, arguments: None }] } }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Wild(PatWild { attrs: [], underscore_token: Underscore })], or2_token: Or, output: Default, body: Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [] }) }), Comma, Closure(ExprClosure { attrs: [], movability: None, asyncness: None, capture: None, or1_token: Or, inputs: [Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: x, span: bytes(157057..157058) }, subpat: None }), Comma, Ident(PatIdent { attrs: [], by_ref: None, mutability: None, ident: Ident { sym: y, span: bytes(157060..157061) }, subpat: None }), Comma, Wild(PatWild { attrs: [], underscore_token: Underscore }), Comma, Wild(PatWild { attrs: [], underscore_token: Underscore })], or2_token: Or, output: Default, body: Binary(ExprBinary { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ordering, span: bytes(157069..157077) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: Less, span: bytes(157079..157083) }, arguments: None }] } }), op: Eq(EqEq), right: Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: compare, span: bytes(157087..157094) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: x, span: bytes(157095..157096) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: y, span: bytes(157098..157099) }, arguments: None }] } })] }) }) })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(158301..158304) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ExactlyOneError, span: bytes(158305..158320) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(158322..158325) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(158327..158331) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(158332..158337) }, arguments: None }] } })] }), Comma, Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Some, span: bytes(158340..158344) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: second, span: bytes(158345..158351) }, arguments: None }] } })] })] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(158355..158359) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Ok, span: bytes(158438..158440) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: first, span: bytes(158441..158446) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: Err, span: bytes(158522..158525) }, arguments: None }] } }), paren_token: Paren, args: [Call(ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: ExactlyOneError, span: bytes(158526..158541) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: new, span: bytes(158543..158546) }, arguments: None }] } }), paren_token: Paren, args: [Tuple(ExprTuple { attrs: [], paren_token: Paren, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(158548..158552) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: None, span: bytes(158554..158558) }, arguments: None }] } })] }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: self, span: bytes(158561..158565) }, arguments: None }] } })] })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: pred, span: bytes(161411..161415) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: front, span: bytes(161416..161421) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: pred, span: bytes(161522..161526) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: back, span: bytes(161527..161531) }, arguments: None }] } })] }
ExprCall { attrs: [], func: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: std, span: bytes(161559..161562) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: mem, span: bytes(161564..161567) }, arguments: None }, Colon2, PathSegment { ident: Ident { sym: swap, span: bytes(161569..161573) }, arguments: None }] } }), paren_token: Paren, args: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: front, span: bytes(161574..161579) }, arguments: None }] } }), Comma, Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { sym: back, span: bytes(161581..161585) }, arguments: None }] } })] }

Metric output format: x/y
    x = unsafe code used by the build
    y = total unsafe code found in the crate

Symbols: 
    :) = No `unsafe` usage found, declares #![forbid(unsafe_code)]
    ?  = No `unsafe` usage found, missing #![forbid(unsafe_code)]
    !  = `unsafe` usage found

Functions  Expressions  Impls  Traits  Methods  Dependency

0/0        0/0          0/0    0/0     0/0      ?  test3_package_with_nested_deps 0.1.0
0/0        0/0          0/0    0/0     0/0      ?  ├── doc-comment 0.3.1
0/0        0/55         0/3    0/1     0/3      ?  ├── itertools 0.8.0
0/0        0/0          0/0    0/0     0/0      ?  │   └── either 1.5.2
1/1        2/2          0/0    0/0     0/0      !  └── test2_package_with_shallow_deps 0.1.0
0/0        0/0          0/0    0/0     0/0      ?      ├── ref_slice 1.1.1
1/1        1/1          0/0    0/0     0/0      !      └── test1_package_with_no_deps 0.1.0

2/2        3/58         0/3    0/1     0/3    


